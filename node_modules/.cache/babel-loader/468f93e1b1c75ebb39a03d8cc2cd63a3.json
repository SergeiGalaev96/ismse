{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Serj\\\\Desktop\\\\ismse\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\Serj\\\\Desktop\\\\ismse\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Serj\\\\Desktop\\\\ismse\\\\src\\\\components\\\\Users\\\\Users.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react'; // import clsx from 'clsx';\n// import { makeStyles} from '@material-ui/core/styles';\n\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MTable from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from '@material-ui/core/Button';\nimport { Grid } from '@material-ui/core';\nimport Select from 'react-select';\nimport Paper from '@material-ui/core/Paper';\nimport { Table } from 'reactstrap';\nimport swal from 'sweetalert'; // https://sweetalert.js.org/guides/\n\nimport zIndex from '@material-ui/core/styles/zIndex';\nexport default (props => {\n  // This.state\n  const _useState = useState(props.userId),\n        _useState2 = _slicedToArray(_useState, 2),\n        userId = _useState2[0],\n        setUserId = _useState2[1];\n\n  const _useState3 = useState(getUUID()),\n        _useState4 = _slicedToArray(_useState3, 1),\n        createUserId = _useState4[0];\n\n  const _useState5 = useState(props.session_id),\n        _useState6 = _slicedToArray(_useState5, 1),\n        session_id = _useState6[0];\n\n  const _useState7 = useState(props.process_id),\n        _useState8 = _slicedToArray(_useState7, 1),\n        process_id = _useState8[0];\n\n  const _useState9 = useState(props.organizationId),\n        _useState10 = _slicedToArray(_useState9, 1),\n        organizationId = _useState10[0];\n\n  const _useState11 = useState(props.taskID),\n        _useState12 = _slicedToArray(_useState11, 1),\n        taskID = _useState12[0];\n\n  const _useState13 = useState(props.userRole),\n        _useState14 = _slicedToArray(_useState13, 1),\n        userRole = _useState14[0];\n\n  const _useState15 = useState(props.Form),\n        _useState16 = _slicedToArray(_useState15, 1),\n        Form = _useState16[0];\n\n  const _useState17 = useState(null),\n        _useState18 = _slicedToArray(_useState17, 2),\n        selectedDoc = _useState18[0],\n        setSelectedDoc = _useState18[1];\n\n  const _useState19 = useState(props.formType),\n        _useState20 = _slicedToArray(_useState19, 1),\n        formType = _useState20[0];\n\n  const _useState21 = useState(null),\n        _useState22 = _slicedToArray(_useState21, 2),\n        docList = _useState22[0],\n        setDocList = _useState22[1];\n\n  const _useState23 = useState(props.docList),\n        _useState24 = _slicedToArray(_useState23, 2),\n        gridFormData = _useState24[0],\n        setGridFormData = _useState24[1];\n\n  const _useState25 = useState(props.gridForm),\n        _useState26 = _slicedToArray(_useState25, 1),\n        gridForm = _useState26[0];\n\n  const _useState27 = useState(props.gridFormButtons),\n        _useState28 = _slicedToArray(_useState27, 1),\n        gridFormButtons = _useState28[0];\n\n  const _useState29 = useState(props.enumData),\n        _useState30 = _slicedToArray(_useState29, 1),\n        enumData = _useState30[0];\n\n  const _useState31 = useState(props.organizationIdList),\n        _useState32 = _slicedToArray(_useState31, 1),\n        organizationIdList = _useState32[0];\n\n  const _useState33 = useState({\n    \"organizationId\": props.organizationId\n  }),\n        _useState34 = _slicedToArray(_useState33, 2),\n        fieldValue = _useState34[0],\n        setFieldValue = _useState34[1];\n\n  const _useState35 = useState([]),\n        _useState36 = _slicedToArray(_useState35, 2),\n        selectedOptions = _useState36[0],\n        setSelectedOptions = _useState36[1];\n\n  const _useState37 = useState(props.buttons),\n        _useState38 = _slicedToArray(_useState37, 1),\n        buttons = _useState38[0]; // Set data from props to state of component\n\n\n  useEffect(() => {\n    if (props.selectedDoc !== \"null\" && props.selectedDoc !== null) {\n      try {\n        let parsedDoc = JSON.parse(props.selectedDoc);\n        let userRole = getIdByRole(parsedDoc.attributes.userRole[0]);\n        let fields = {\n          // id: parsedDoc.id,\n          username: parsedDoc.username,\n          firstName: parsedDoc.firstName,\n          lastName: parsedDoc.lastName,\n          email: parsedDoc.email,\n          userRole: userRole,\n          userId: parsedDoc.attributes.userId[0],\n          organizationId: parsedDoc.attributes.organizationId[0],\n          address: parsedDoc.attributes.address[0],\n          phone: parsedDoc.attributes.phone[0],\n          signDocument: parsedDoc.attributes.signDocument !== undefined ? parsedDoc.attributes.signDocument[0] : false,\n          changeStatus: parsedDoc.attributes.changeStatus !== undefined ? parsedDoc.attributes.changeStatus[0] : false\n        };\n        setFieldValue(fields);\n        setSelectedDoc(parsedDoc);\n        console.log(\"SDOC\", fields);\n      } catch (er) {\n        console.log(\"Sel Doc ERR\", er);\n      }\n    }\n  }, []); // Functions from props \n\n  function sendFieldValues(commandJson) {\n    props.sendFieldValues(commandJson);\n  }\n\n  function clearTabData(process_id) {\n    props.clearTabData(process_id);\n  } // Local functions\n\n\n  function getIdByRole(userRole) {\n    for (let i = 0; i < enumData.length; i++) {\n      for (let l = 0; l < enumData[i].data.length; l++) {\n        if (userRole === enumData[i].data[l].Text) {\n          console.log(\"ROLE\", enumData[i].data[l].Text);\n          return enumData[i].data[l].Id;\n        }\n      }\n    }\n  } // Find users by input parameters\n\n\n  function filterDocList() {\n    let newDocList = [];\n\n    if (props.docList !== \"null\" && props.docList !== null && props.taskType !== \"showCreateUser\") {\n      var parsedGridFormData = JSON.parse(props.docList);\n\n      for (let i = 0; i < parsedGridFormData.length; i++) {\n        let orgId = parsedGridFormData[i].attributes.organizationId[0];\n\n        if (userRole === \"Администратор\") {\n          let user = {\n            id: parsedGridFormData[i].id,\n            username: parsedGridFormData[i].username,\n            firstName: parsedGridFormData[i].firstName,\n            lastName: parsedGridFormData[i].lastName,\n            email: parsedGridFormData[i].email,\n            userRole: parsedGridFormData[i].attributes.userRole[0],\n            userId: parsedGridFormData[i].attributes.userId[0],\n            organizationId: parsedGridFormData[i].attributes.organizationId[0],\n            address: parsedGridFormData[i].attributes.address[0],\n            phone: parsedGridFormData[i].attributes.phone[0]\n          };\n          newDocList.push(user);\n        } else {\n          if (orgId === organizationId) {\n            let user = {\n              id: parsedGridFormData[i].id,\n              username: parsedGridFormData[i].username,\n              firstName: parsedGridFormData[i].firstName,\n              lastName: parsedGridFormData[i].lastName,\n              email: parsedGridFormData[i].email,\n              userRole: parsedGridFormData[i].attributes.userRole[0],\n              userId: parsedGridFormData[i].attributes.userId[0],\n              organizationId: parsedGridFormData[i].attributes.organizationId[0],\n              address: parsedGridFormData[i].attributes.address[0],\n              phone: parsedGridFormData[i].attributes.phone[0]\n            };\n            newDocList.push(user); // console.log(\"USER\", user)\n          }\n        }\n      }\n    }\n\n    setGridFormData(parsedGridFormData);\n    setDocList(newDocList);\n  }\n\n  function getUUID() {\n    const uuidv1 = require(\"uuid/v1\");\n\n    return uuidv1();\n  }\n\n  function handleTextChange(event) {\n    // console.log(\"EVENT\", event.target.name, event.target.value)\n    fieldValue[event.target.name] = event.target.value;\n    setFieldValue(fieldValue);\n    console.log(\"FIELDVALUE\", fieldValue);\n  }\n\n  function handleSelectChange(event) {\n    fieldValue[event.name] = event.value;\n    setFieldValue(fieldValue);\n    let updateSelectedOptions = selectedOptions.slice();\n    let noSuchOption = true;\n\n    for (let i = 0; i < updateSelectedOptions.length; i++) {\n      if (event.name === updateSelectedOptions[i].name) {\n        updateSelectedOptions[i] = event;\n        setSelectedOptions(updateSelectedOptions); // console.log(\"SO\", selectedOptions)\n\n        noSuchOption = false;\n        break;\n      } else {\n        noSuchOption = true;\n      }\n    }\n\n    if (noSuchOption === true) {\n      updateSelectedOptions.push(event);\n      setSelectedOptions(updateSelectedOptions); // console.log(\"SO\", selectedOptions)\n    }\n  }\n\n  const handleCheckboxChange = event => {\n    setFieldValue(_objectSpread({}, fieldValue, {\n      [event.target.name]: event.target.checked\n    })); // console.log(\"new checkbox status\", fieldValue[event.target.name])\n  };\n\n  function getRole() {\n    for (let k = 0; k < enumData.length; k++) {\n      for (let d = 0; d < enumData[k].data.length; d++) {\n        if (fieldValue[\"userRole\"] === enumData[k].data[d].Id) {\n          return enumData[k].data[d].Text;\n        }\n      }\n    }\n  } // Collect data to create new user\n\n\n  function getFieldValuesKeycloakCreate() {\n    let data = {\n      username: fieldValue[\"username\"],\n      firstName: fieldValue[\"firstName\"],\n      lastName: fieldValue[\"lastName\"],\n      email: fieldValue[\"email\"] !== undefined ? fieldValue[\"email\"] : \"\",\n      emailVerified: true,\n      enabled: true,\n      requiredActions: [\"UPDATE_PASSWORD\"],\n      attributes: {\n        locale: \"ru\",\n        organizationId: fieldValue[\"organizationId\"],\n        userId: \"12345\",\n        // Will be replaced with id from cre3ated user in asist REST\n        userRole: fieldValue[\"userRole\"] !== undefined ? getRole() : \"\",\n        address: fieldValue[\"address\"] !== undefined ? fieldValue[\"address\"] : \"\",\n        phone: fieldValue[\"phone\"] !== undefined ? fieldValue[\"phone\"] : \"\",\n        signDocument: fieldValue[\"signDocument\"] !== undefined ? fieldValue[\"signDocument\"] : \"\",\n        changeStatus: fieldValue[\"changeStatus\"] !== undefined ? fieldValue[\"changeStatus\"] : \"\"\n      },\n      credentials: [{\n        type: \"password\",\n        value: \"12345\"\n      }]\n    };\n    return data;\n  } // Collect data to create new user in REST\n\n\n  function getFieldValuesRest() {\n    var generator = require('generate-password');\n\n    var password = generator.generate({\n      length: 10,\n      numbers: true\n    });\n    let data = {\n      \"UserName\": fieldValue[\"username\"],\n      \"Password\": password,\n      \"LastName\": fieldValue[\"lastName\"],\n      \"FirstName\": fieldValue[\"firstName\"],\n      \"Address\": fieldValue[\"address\"] !== undefined ? fieldValue[\"address\"] : \"\",\n      \"Phone\": fieldValue[\"phone\"] !== undefined ? fieldValue[\"phone\"] : \"\",\n      \"Email\": fieldValue[\"email\"] !== undefined ? fieldValue[\"email\"] : \"\",\n      \"ParentId\": getParentId(),\n      \"OrgPositionId\": \"F464D1AD-C648-4302-8AAB-BCABBCC406E6\",\n      \"UserId\": userId,\n      // Needs existing user id\n      \"Sex\": true,\n      \"LanguageId\": 4\n    };\n    return data;\n  } // Collect data to show user creating form\n\n\n  function getFieldValuesSelectedDoc() {\n    let data = {\n      username: fieldValue[\"username\"] !== undefined ? fieldValue[\"username\"] : \"\",\n      firstName: fieldValue[\"firstName\"] !== undefined ? fieldValue[\"firstName\"] : \"\",\n      lastName: fieldValue[\"lastName\"] !== undefined ? fieldValue[\"lastName\"] : \"\",\n      email: fieldValue[\"email\"] !== undefined ? fieldValue[\"email\"] : \"\",\n      attributes: {\n        organizationId: [fieldValue[\"organizationId\"]],\n        userId: userId,\n        userRole: [getRole()],\n        address: [fieldValue[\"address\"] !== undefined ? fieldValue[\"address\"] : \"\"],\n        phone: [fieldValue[\"phone\"] !== undefined ? fieldValue[\"phone\"] : \"\"],\n        signDocument: [fieldValue[\"signDocument\"] !== undefined ? fieldValue[\"signDocument\"] : \"\"],\n        changeStatus: [fieldValue[\"changeStatus\"] !== undefined ? fieldValue[\"changeStatus\"] : \"\"]\n      }\n    };\n    return data;\n  } // Collect data to update existed user\n\n\n  function getFieldValuesKeycloakUpdate() {\n    let data = {\n      firstName: fieldValue[\"firstName\"],\n      lastName: fieldValue[\"lastName\"],\n      email: fieldValue[\"email\"],\n      emailVerified: true,\n      enabled: true,\n      attributes: {\n        locale: \"ru\",\n        organizationId: fieldValue[\"organizationId\"],\n        userId: fieldValue[\"userId\"],\n        userRole: getRole(),\n        address: fieldValue[\"address\"],\n        phone: fieldValue[\"phone\"],\n        signDocument: fieldValue[\"signDocument\"],\n        changeStatus: fieldValue[\"changeStatus\"]\n      }\n    };\n    return data;\n  } // Collect data to reset existed user password\n\n\n  function getFieldValuesKeycloakResetPassword() {\n    let data = {\n      firstName: fieldValue[\"firstName\"],\n      lastName: fieldValue[\"lastName\"],\n      email: fieldValue[\"email\"],\n      emailVerified: true,\n      enabled: true,\n      requiredActions: [\"UPDATE_PASSWORD\"],\n      attributes: {\n        locale: \"ru\",\n        organizationId: organizationId,\n        userId: fieldValue[\"userId\"],\n        userRole: getRole(),\n        address: fieldValue[\"address\"],\n        phone: fieldValue[\"phone\"]\n      },\n      credentials: [{\n        type: \"password\",\n        value: \"12345\"\n      }]\n    };\n    return data;\n  } // Get Id of Org id created in asist and compare with local Org id by label\n\n\n  function getParentId() {\n    let orgId = null;\n\n    for (let i = 0; i < enumData.length; i++) {\n      for (let l = 0; l < enumData[i].data.length; l++) {\n        if (fieldValue[\"organizationId\"] === enumData[i].data[l].Id) {\n          // console.log(\"ORG TEXT\", enumData[i].data[l].Text)\n          for (let n = 0; n < organizationIdList.length; n++) {\n            if (organizationIdList[n].Text === enumData[i].data[l].Text) {\n              // console.log(\"ParentID\", organizationIdList[n].Id)\n              // return organizationIdList[n].Id\n              orgId = organizationIdList[n].Id;\n            }\n          }\n        }\n      }\n    }\n\n    if (orgId === null) {\n      swAllert(\"Не найдена организация!\", \"warning\");\n    }\n\n    return orgId;\n  } // Validate input data\n\n\n  function checkForWrongFields(commandJson) {\n    let enabledToSend = false;\n    var parsedGridFormData = JSON.parse(props.docList);\n\n    if (fieldValue[\"userRole\"] !== undefined && fieldValue[\"userRole\"] !== \"\") {\n      if (fieldValue[\"organizationId\"] !== undefined && fieldValue[\"organizationId\"] !== \"\") {\n        if (fieldValue[\"username\"] !== undefined && fieldValue[\"username\"] !== \"\") {\n          if (fieldValue[\"firstName\"] !== undefined && fieldValue[\"firstName\"] !== \"\") {\n            if (fieldValue[\"lastName\"] !== undefined && fieldValue[\"lastName\"] !== \"\") {\n              for (let i = 0; i < parsedGridFormData.length; i++) {\n                if (parsedGridFormData[i].username === fieldValue[\"username\"]) {\n                  enabledToSend = false;\n                  return swAllert(\"Пользователь с таким логином уже существует\", \"warning\");\n                } else enabledToSend = true;\n              }\n            } else swAllert(\"Введите Имя\", \"warning\");\n          } else swAllert(\"Введите Фамилию\", \"warning\");\n        } else swAllert(\"Введите Логин\", \"warning\");\n      } else swAllert(\"Введите Наименование МСЭК\", \"warning\");\n    } else swAllert(\"Введите Роль\", \"warning\");\n\n    if (enabledToSend === true) {\n      sendFieldValues(commandJson);\n      clearTabData(process_id);\n      swAllert(\"Пользователь успешно создан!\", \"success\");\n    }\n  }\n\n  function swAllert(text, icon) {\n    return swal({\n      text: text,\n      icon: icon,\n      buttons: {\n        ok: \"Ок\"\n      }\n    }).then(click => {\n      if (click === \"ok\") {\n        console.log(\"CLICK OK\", click);\n      }\n    });\n  }\n\n  async function buttonClick(name, item) {\n    if (name === \"createUser\") {\n      let KeycloakDoc = getFieldValuesSelectedDoc();\n      let commandJson = {\n        commandType: \"completeTask\",\n        session_id: session_id,\n        process_id: process_id,\n        taskID: taskID,\n        userId: userId,\n        userRole: userRole,\n        variables: {\n          authorization: {\n            value: null\n          },\n          userAction: {\n            value: \"createUser\"\n          },\n          selectedDoc: {\n            value: JSON.stringify(KeycloakDoc)\n          }\n        }\n      };\n      console.log(\"button createUser: \", commandJson);\n      sendFieldValues(commandJson);\n      clearTabData(process_id);\n    } else if (name === \"saveUser\") {\n      let KeycloakDoc = getFieldValuesKeycloakCreate();\n      let RestDoc = getFieldValuesRest();\n      let commandJson = {\n        commandType: \"completeTask\",\n        session_id: session_id,\n        process_id: process_id,\n        taskID: taskID,\n        userId: userId,\n        userRole: userRole,\n        variables: {\n          authorization: {\n            value: null\n          },\n          userAction: {\n            value: \"saveUser\"\n          },\n          keycloakUserData: {\n            value: JSON.stringify(KeycloakDoc)\n          },\n          restUserData: {\n            value: JSON.stringify(RestDoc)\n          }\n        }\n      };\n      console.log(\"button saveUser: \", commandJson);\n      checkForWrongFields(commandJson);\n    } else if (name === \"findUser\") {\n      let newDocList = [];\n\n      for (let i = 0; i < gridFormData.length; i++) {\n        let orgId = gridFormData[i].attributes.organizationId[0];\n\n        if (userRole === \"Администратор\") {\n          let user = {\n            id: gridFormData[i].id,\n            username: gridFormData[i].username,\n            firstName: gridFormData[i].firstName,\n            lastName: gridFormData[i].lastName,\n            email: gridFormData[i].email,\n            userRole: gridFormData[i].attributes.userRole[0],\n            userId: gridFormData[i].attributes.userId[0],\n            organizationId: gridFormData[i].attributes.organizationId[0],\n            address: gridFormData[i].attributes.address[0],\n            phone: gridFormData[i].attributes.phone[0]\n          };\n          newDocList.push(user);\n        } else {\n          if (orgId === organizationId) {\n            let user = {\n              id: gridFormData[i].id,\n              username: gridFormData[i].username,\n              firstName: gridFormData[i].firstName,\n              lastName: gridFormData[i].lastName,\n              email: gridFormData[i].email,\n              userRole: gridFormData[i].attributes.userRole[0],\n              userId: gridFormData[i].attributes.userId[0],\n              organizationId: gridFormData[i].attributes.organizationId[0],\n              address: gridFormData[i].attributes.address[0],\n              phone: gridFormData[i].attributes.phone[0]\n            };\n            newDocList.push(user);\n          }\n        }\n      }\n\n      let filteredDocList = [];\n\n      for (let i = 0; i < newDocList.length; i++) {\n        let mathedResult = false;\n\n        for (let item in fieldValue) {\n          if (fieldValue[item] !== \"\") {\n            if (item === \"userRole\") {\n              for (let k = 0; k < selectedOptions.length; k++) {\n                if (fieldValue[item] === selectedOptions[k].value) {\n                  if (selectedOptions[k].label === newDocList[i][item]) {\n                    console.log(\"Find\", selectedOptions[k].label, newDocList[i][item]);\n                    mathedResult = true;\n                    break;\n                  } else {\n                    mathedResult = false;\n                  }\n                } else {\n                  mathedResult = false;\n                }\n              }\n            } else {\n              if (fieldValue[item] === newDocList[i][item]) {\n                mathedResult = true;\n              } else {\n                mathedResult = false;\n              }\n            }\n          }\n        }\n\n        if (mathedResult === true) {\n          filteredDocList.push(newDocList[i]);\n        }\n      }\n\n      setDocList(filteredDocList);\n    } else if (name === \"editUser\") {\n      console.log(\"ITEM\", item);\n      let commandJson = {\n        commandType: \"completeTask\",\n        session_id: session_id,\n        process_id: process_id,\n        taskID: taskID,\n        userId: userId,\n        userRole: userRole,\n        variables: {\n          authorization: {\n            value: null\n          },\n          userAction: {\n            value: \"editUser\"\n          },\n          keycloakUserId: {\n            value: item.id\n          }\n        }\n      };\n      console.log(\"button editUser: \", commandJson);\n      sendFieldValues(commandJson);\n      clearTabData(process_id);\n    } else if (name === \"updateUser\") {\n      var userData = getFieldValuesKeycloakUpdate();\n      let commandJson = {\n        commandType: \"completeTask\",\n        session_id: session_id,\n        process_id: process_id,\n        taskID: taskID,\n        userId: userId,\n        userRole: userRole,\n        variables: {\n          authorization: {\n            value: null\n          },\n          userAction: {\n            value: \"updateUser\"\n          },\n          keycloakUserId: {\n            value: selectedDoc.id\n          },\n          keycloakUserData: {\n            value: JSON.stringify(userData)\n          }\n        }\n      };\n      console.log(\"button updateUser:\", commandJson, item);\n      sendFieldValues(commandJson);\n      props.callSuccessToast(\"Пользователь обновлен!\", \"success\");\n      clearTabData(process_id);\n    } else if (name === \"resetPassword\") {\n      swal({\n        text: \"Вы точно хотите сбросить пароль?\",\n        icon: \"warning\",\n        buttons: {\n          ok: \"Да\",\n          cancel: \"Отмена\"\n        }\n      }).then(click => {\n        if (click === \"ok\") {\n          var userData = getFieldValuesKeycloakResetPassword();\n          let commandJson = {\n            commandType: \"completeTask\",\n            session_id: session_id,\n            process_id: process_id,\n            taskID: taskID,\n            userId: userId,\n            userRole: userRole,\n            variables: {\n              authorization: {\n                value: null\n              },\n              userAction: {\n                value: \"updateUser\"\n              },\n              keycloakUserId: {\n                value: selectedDoc.id\n              },\n              keycloakUserData: {\n                value: JSON.stringify(userData)\n              }\n            }\n          };\n          sendFieldValues(commandJson);\n          swAllert(\"Пароль успешно сброшен!\", \"success\");\n          clearTabData(process_id);\n          console.log(\"button updateUser:\", commandJson, item);\n        }\n      });\n    } else if (name === \"deleteUser\") {\n      swal({\n        text: \"Вы точно хотите удалить этот документ?\",\n        icon: \"warning\",\n        buttons: {\n          yes: \"Да\",\n          no: \"Нет\"\n        },\n        dangerMode: true\n      }).then(click => {\n        if (click === \"yes\") {\n          let commandJson = {\n            commandType: \"completeTask\",\n            session_id: session_id,\n            process_id: process_id,\n            taskID: taskID,\n            userId: userId,\n            userRole: userRole,\n            variables: {\n              authorization: {\n                value: null\n              },\n              userAction: {\n                value: \"deleteUser\"\n              },\n              keycloakUserId: {\n                value: selectedDoc.id\n              }\n            }\n          };\n          console.log(\"button deleteUser:\", commandJson, item);\n          sendFieldValues(commandJson);\n          clearTabData(process_id);\n          props.callSuccessToast(\"Пользователь удален!\");\n        }\n      });\n    } else if (name === \"back\") {\n      let commandJson = {\n        commandType: \"completeTask\",\n        session_id: session_id,\n        process_id: process_id,\n        taskID: taskID,\n        userId: userId,\n        userRole: userRole,\n        variables: {\n          userAction: {\n            value: \"back\"\n          }\n        }\n      };\n      console.log(\"button back:\", commandJson);\n      sendFieldValues(commandJson);\n      clearTabData(process_id);\n    } else if (name === \"cancel\") {\n      const commandJson = {\n        commandType: \"completeTask\",\n        process_id: process_id,\n        session_id: session_id,\n        taskID: taskID,\n        userRole: userRole,\n        variables: {\n          userAction: {\n            value: \"cancel\"\n          }\n        }\n      };\n      console.log(\"button cancel: \", commandJson);\n      sendFieldValues(commandJson);\n      clearTabData(process_id);\n    } else {\n      console.log(\"Button \", name);\n    }\n  }\n\n  function sectionBuilder(section, index) {\n    // creating table and label of section and components\n    return React.createElement(MTable, {\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      style: {\n        height: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      style: {\n        color: \"black\",\n        fontSize: 14,\n        backgroundColor: \"#D3D3FE\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, section.label), React.createElement(TableCell, {\n      style: {\n        backgroundColor: \"#D3D3FE\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, section.contents.map((contentItem, index) => React.createElement(TableRow, {\n      style: {\n        height: 30,\n        maxWidth: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, contentItem.label !== \"\" && React.createElement(TableCell, {\n      align: \"left\",\n      style: {\n        maxWidth: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, contentItem.label), React.createElement(TableCell, {\n      align: \"left\",\n      style: {\n        maxWidth: 200,\n        height: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, contentBuilder(contentItem))))));\n  }\n\n  function contentBuilder(contentItem) {\n    // Creating components by it's type\n    if (contentItem.type === \"Text\") {\n      return React.createElement(TextField, {\n        multiline: true // onChange = {componentChange}\n        ,\n        onBlur: handleTextChange,\n        name: contentItem.name,\n        style: {\n          minWidth: 250\n        },\n        disabled: formType === \"view\" || contentItem.edit === false ? true : false,\n        defaultValue: fieldValue[contentItem.name] ? fieldValue[contentItem.name] : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661\n        },\n        __self: this\n      });\n    } else if (contentItem.type === \"Enum\") {\n      let options = [];\n      options.push({\n        \"value\": \"\",\n        \"label\": \"\",\n        \"name\": contentItem.name\n      });\n\n      for (let i = 0; i < enumData.length; i++) {\n        if (contentItem.enumDef === enumData[i].enumDef) {\n          for (let l = 0; l < enumData[i].data.length; l++) {\n            options.push({\n              \"value\": enumData[i].data[l].Id,\n              \"label\": enumData[i].data[l].Text,\n              \"name\": contentItem.name\n            });\n          }\n        }\n      }\n\n      let selectedOption = {\n        \"value\": \"\",\n        \"label\": \"\",\n        \"name\": contentItem.name\n      }; // console.log(\"ORG\", contentItem.name, fieldValue[contentItem.name], organizationId)\n\n      if (fieldValue[contentItem.name] !== undefined) {\n        for (let i = 0; i < options.length; i++) {\n          if (fieldValue[contentItem.name] === options[i].value) {\n            selectedOption = options[i]; // console.log(\"OPT\", options[i])\n\n            break;\n          }\n        }\n      }\n\n      if (selectedOptions.length !== 0) {\n        for (let i = 0; i < selectedOptions.length; i++) {\n          if (contentItem.name === selectedOptions[i].name) {\n            selectedOption = selectedOptions[i];\n          }\n        }\n      }\n\n      return React.createElement(Select, {\n        name: contentItem.name // value = {() => setSelectedOption(options, contentItem.name)}\n        ,\n        value: selectedOption,\n        onChange: handleSelectChange,\n        style: {\n          height: 30,\n          minWidth: 150,\n          menuPortal: base => _objectSpread({}, base, {\n            zIndex: 9999\n          })\n        },\n        options: options,\n        isDisabled: formType === \"view\" || contentItem.edit === false ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714\n        },\n        __self: this\n      });\n    } else if (contentItem.type === \"Bool\") {\n      return React.createElement(Checkbox, {\n        style: {\n          maxWidth: 20,\n          height: 15,\n          color: formType === \"view\" || contentItem.edit === false ? \"grey\" : \"green\"\n        },\n        name: contentItem.name,\n        onChange: handleCheckboxChange,\n        disabled: formType === \"view\" || contentItem.edit === false ? true : false,\n        checked: fieldValue[contentItem.name] === \"true\" || fieldValue[contentItem.name] === true ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727\n        },\n        __self: this\n      });\n    } // else if(contentItem.type === \"Password\"){\n    //   return(\n    //     <OutlinedInput\n    //       name = {contentItem.name}\n    //       id=\"outlined-adornment-password\"\n    //       type={values.showPassword ? 'text' : 'password'}\n    //       value={values[contentItem.name]}\n    //       // onChange = {handlePasswordChange(contentItem.name)}\n    //       style={{height: 35}}\n    //       onBlur = {handleTextChange}\n    //       endAdornment={\n    //         <InputAdornment position=\"end\">\n    //           <IconButton\n    //             aria-label=\"toggle password visibility\"\n    //             onClick={handleClickShowPassword}\n    //             // onMouseDown={handleMouseDownPassword}\n    //             edge=\"end\"\n    //           >\n    //             {values.showPassword ? <Visibility /> : <VisibilityOff />}\n    //           </IconButton>\n    //         </InputAdornment>\n    //       }\n    //     />\n    //   )\n    // }\n\n  }\n\n  function getGridFormItems(value, type) {\n    if (type === \"Enum\") {\n      for (let i = 0; i < enumData.length; i++) {\n        for (let l = 0; l < enumData[i].data.length; l++) {\n          if (enumData[i].data[l].Id === value) {\n            return enumData[i].data[l].Text;\n          }\n        }\n      }\n    } else {\n      return value;\n    }\n  }\n\n  console.log(\"UserForm props\", props);\n  console.log(\"FIELDS\", fieldValue);\n  console.log(\"SOP\", selectedOptions);\n\n  if (docList === null) {\n    filterDocList();\n  }\n\n  if (docList !== null) try {\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788\n      },\n      __self: this\n    }, React.createElement(MTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      style: {\n        maxHeight: 25\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      style: {\n        fontSize: 16,\n        color: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, Form.label)))), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }, Form.sections.map((section, index) => {\n      return sectionBuilder(section, index);\n    })), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"flex-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, buttons.map((button, index) => // return createButton(button, index)\n    React.createElement(Button, {\n      name: button.name,\n      variant: \"outlined\" // id={dataItem.id}\n      ,\n      value: button.name,\n      onClick: () => buttonClick(button.name, null),\n      style: {\n        margin: 3,\n        backgroundColor: button.backgroundColor,\n        height: 32,\n        fontSize: 12\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, button.label))))))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }), Object.keys(docList).length !== 0 && // DocListData\n    React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      spacing: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      sm: \"auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, React.createElement(Table, {\n      bordered: true,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      style: {\n        backgroundColor: \"#D3D3FE\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      colSpan: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }), gridForm.sections.map((section, index) => {\n      return React.createElement(\"th\", {\n        colSpan: section.contents.length,\n        style: {\n          color: \"black\",\n          fontSize: 13\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837\n        },\n        __self: this\n      }, section.label);\n    })), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      rowSpan: \"2\",\n      style: {\n        color: \"black\",\n        fontSize: 12,\n        minWidth: 75\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0435\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, gridForm.sections.map(section => section.contents.map((contentItem, index) => {\n      return React.createElement(\"th\", {\n        rowSpan: \"2\",\n        style: {\n          color: \"black\",\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848\n        },\n        __self: this\n      }, contentItem.label);\n    })))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854\n      },\n      __self: this\n    }, docList.map((dataItem, index) => React.createElement(\"tr\", {\n      style: {\n        height: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      style: {\n        maxWidth: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, gridFormButtons !== null && gridFormButtons.map((button, index) => React.createElement(Button, {\n      name: button.name,\n      variant: \"outlined\" // id={dataItem.id}\n      ,\n      value: button.name,\n      onClick: () => buttonClick(button.name, dataItem),\n      style: {\n        margin: 1,\n        height: 24,\n        fontSize: 9,\n        maxWidth: 32,\n        backgroundColor: button.backgroundColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860\n      },\n      __self: this\n    }, button.label))), gridForm.sections.map(section => {\n      return section.contents.map(contentItem => {\n        for (let key in dataItem) {\n          if (key === contentItem.name) {\n            if (dataItem[key] === null || dataItem[key] === \"\") {\n              return React.createElement(\"td\", {\n                align: \"center\",\n                style: {\n                  color: \"black\",\n                  fontSize: 12\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 884\n                },\n                __self: this\n              }, \"-\");\n            } else {\n              return React.createElement(\"td\", {\n                align: \"center\",\n                style: {\n                  color: \"black\",\n                  fontSize: 12\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 889\n                },\n                __self: this\n              }, getGridFormItems(dataItem[key], contentItem.type));\n            }\n          }\n        }\n      });\n    }))))))))));\n  } catch (error) {\n    console.log(\"ERROR\", error);\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Serj\\Desktop\\ismse\\src\\components\\Users\\Users.jsx"],"names":["React","useState","useEffect","Card","TextField","Checkbox","MTable","TableHead","TableRow","TableBody","TableCell","Button","Grid","Select","Paper","Table","swal","zIndex","props","userId","setUserId","getUUID","createUserId","session_id","process_id","organizationId","taskID","userRole","Form","selectedDoc","setSelectedDoc","formType","docList","setDocList","gridFormData","setGridFormData","gridForm","gridFormButtons","enumData","organizationIdList","fieldValue","setFieldValue","selectedOptions","setSelectedOptions","buttons","parsedDoc","JSON","parse","getIdByRole","attributes","fields","username","firstName","lastName","email","address","phone","signDocument","undefined","changeStatus","console","log","er","sendFieldValues","commandJson","clearTabData","i","length","l","data","Text","Id","filterDocList","newDocList","taskType","parsedGridFormData","orgId","user","id","push","uuidv1","require","handleTextChange","event","target","name","value","handleSelectChange","updateSelectedOptions","slice","noSuchOption","handleCheckboxChange","checked","getRole","k","d","getFieldValuesKeycloakCreate","emailVerified","enabled","requiredActions","locale","credentials","type","getFieldValuesRest","generator","password","generate","numbers","getParentId","getFieldValuesSelectedDoc","getFieldValuesKeycloakUpdate","getFieldValuesKeycloakResetPassword","n","swAllert","checkForWrongFields","enabledToSend","text","icon","ok","then","click","buttonClick","item","KeycloakDoc","commandType","variables","authorization","userAction","stringify","RestDoc","keycloakUserData","restUserData","filteredDocList","mathedResult","label","keycloakUserId","userData","callSuccessToast","cancel","yes","no","dangerMode","sectionBuilder","section","index","height","color","fontSize","backgroundColor","contents","map","contentItem","maxWidth","contentBuilder","minWidth","edit","options","enumDef","selectedOption","menuPortal","base","getGridFormItems","maxHeight","sections","button","margin","Object","keys","dataItem","key","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import clsx from 'clsx';\r\n// import { makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MTable from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { Grid } from '@material-ui/core';\r\nimport Select from 'react-select';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  Table\r\n} from 'reactstrap';\r\nimport swal from 'sweetalert' // https://sweetalert.js.org/guides/\r\nimport zIndex from '@material-ui/core/styles/zIndex';\r\n\r\nexport default (props) => {\r\n  // This.state\r\n  const [userId, setUserId] = useState(props.userId)\r\n  const [createUserId] = useState(getUUID())\r\n  const [session_id] = useState(props.session_id)\r\n  const [process_id] = useState(props.process_id)\r\n  const [organizationId] = useState(props.organizationId)\r\n  const [taskID] = useState(props.taskID)\r\n  const [userRole] = useState(props.userRole)\r\n  const [Form] = useState(props.Form)\r\n  const [selectedDoc, setSelectedDoc] = useState(null)\r\n  const [formType] = useState(props.formType)\r\n  const [docList, setDocList] = useState(null)\r\n  const [gridFormData, setGridFormData] = useState(props.docList)\r\n  const [gridForm] = useState(props.gridForm)\r\n  const [gridFormButtons] = useState(props.gridFormButtons)\r\n  const [enumData] = useState(props.enumData)\r\n  const [organizationIdList] = useState(props.organizationIdList)\r\n  const [fieldValue, setFieldValue] = useState({ \"organizationId\": props.organizationId })\r\n  const [selectedOptions, setSelectedOptions] = useState([])\r\n  const [buttons] = useState(props.buttons)\r\n\r\n  // Set data from props to state of component\r\n  useEffect(() => {\r\n    if (props.selectedDoc !== \"null\" && props.selectedDoc !== null) {\r\n      try {\r\n        let parsedDoc = JSON.parse(props.selectedDoc)\r\n        let userRole = getIdByRole(parsedDoc.attributes.userRole[0])\r\n        let fields = {\r\n          // id: parsedDoc.id,\r\n          username: parsedDoc.username,\r\n          firstName: parsedDoc.firstName,\r\n          lastName: parsedDoc.lastName,\r\n          email: parsedDoc.email,\r\n          userRole: userRole,\r\n          userId: parsedDoc.attributes.userId[0],\r\n          organizationId: parsedDoc.attributes.organizationId[0],\r\n          address: parsedDoc.attributes.address[0],\r\n          phone: parsedDoc.attributes.phone[0],\r\n          signDocument: parsedDoc.attributes.signDocument !== undefined ? parsedDoc.attributes.signDocument[0] : false,\r\n          changeStatus: parsedDoc.attributes.changeStatus !== undefined ? parsedDoc.attributes.changeStatus[0] : false\r\n        }\r\n        setFieldValue(fields)\r\n        setSelectedDoc(parsedDoc)\r\n        console.log(\"SDOC\", fields)\r\n      }\r\n      catch (er) {\r\n        console.log(\"Sel Doc ERR\", er)\r\n      }\r\n    }\r\n  }, [])\r\n  // Functions from props \r\n  function sendFieldValues(commandJson) {\r\n    props.sendFieldValues(commandJson)\r\n  }\r\n  function clearTabData(process_id) {\r\n    props.clearTabData(process_id)\r\n  }\r\n\r\n  // Local functions\r\n  function getIdByRole(userRole) {\r\n    for (let i = 0; i < enumData.length; i++) {\r\n      for (let l = 0; l < enumData[i].data.length; l++) {\r\n        if (userRole === enumData[i].data[l].Text) {\r\n          console.log(\"ROLE\", enumData[i].data[l].Text)\r\n          return (enumData[i].data[l].Id)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Find users by input parameters\r\n  function filterDocList() {\r\n    let newDocList = []\r\n    if (props.docList !== \"null\" && props.docList !== null && props.taskType !== \"showCreateUser\") {\r\n      var parsedGridFormData = JSON.parse(props.docList)\r\n      for (let i = 0; i < parsedGridFormData.length; i++) {\r\n        let orgId = parsedGridFormData[i].attributes.organizationId[0]\r\n        if (userRole === \"Администратор\") {\r\n          let user = {\r\n            id: parsedGridFormData[i].id,\r\n            username: parsedGridFormData[i].username,\r\n            firstName: parsedGridFormData[i].firstName,\r\n            lastName: parsedGridFormData[i].lastName,\r\n            email: parsedGridFormData[i].email,\r\n            userRole: parsedGridFormData[i].attributes.userRole[0],\r\n            userId: parsedGridFormData[i].attributes.userId[0],\r\n            organizationId: parsedGridFormData[i].attributes.organizationId[0],\r\n            address: parsedGridFormData[i].attributes.address[0],\r\n            phone: parsedGridFormData[i].attributes.phone[0]\r\n          }\r\n          newDocList.push(user)\r\n        }\r\n        else {\r\n          if (orgId === organizationId) {\r\n            let user = {\r\n              id: parsedGridFormData[i].id,\r\n              username: parsedGridFormData[i].username,\r\n              firstName: parsedGridFormData[i].firstName,\r\n              lastName: parsedGridFormData[i].lastName,\r\n              email: parsedGridFormData[i].email,\r\n              userRole: parsedGridFormData[i].attributes.userRole[0],\r\n              userId: parsedGridFormData[i].attributes.userId[0],\r\n              organizationId: parsedGridFormData[i].attributes.organizationId[0],\r\n              address: parsedGridFormData[i].attributes.address[0],\r\n              phone: parsedGridFormData[i].attributes.phone[0]\r\n            }\r\n            newDocList.push(user)\r\n            // console.log(\"USER\", user)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setGridFormData(parsedGridFormData)\r\n    setDocList(newDocList)\r\n  }\r\n  function getUUID() {\r\n    const uuidv1 = require(\"uuid/v1\")\r\n    return uuidv1()\r\n  }\r\n  function handleTextChange(event) {\r\n    // console.log(\"EVENT\", event.target.name, event.target.value)\r\n    fieldValue[event.target.name] = event.target.value\r\n    setFieldValue(fieldValue)\r\n    console.log(\"FIELDVALUE\", fieldValue)\r\n  }\r\n  function handleSelectChange(event) {\r\n    fieldValue[event.name] = event.value\r\n    setFieldValue(fieldValue)\r\n    let updateSelectedOptions = selectedOptions.slice()\r\n    let noSuchOption = true\r\n    for (let i = 0; i < updateSelectedOptions.length; i++) {\r\n      if (event.name === updateSelectedOptions[i].name) {\r\n        updateSelectedOptions[i] = event\r\n        setSelectedOptions(updateSelectedOptions)\r\n        // console.log(\"SO\", selectedOptions)\r\n        noSuchOption = false\r\n        break\r\n      }\r\n      else {\r\n        noSuchOption = true\r\n      }\r\n    }\r\n    if (noSuchOption === true) {\r\n      updateSelectedOptions.push(event)\r\n      setSelectedOptions(updateSelectedOptions)\r\n      // console.log(\"SO\", selectedOptions)\r\n    }\r\n  }\r\n  const handleCheckboxChange = (event) => {\r\n    setFieldValue({ ...fieldValue, [event.target.name]: event.target.checked })\r\n    // console.log(\"new checkbox status\", fieldValue[event.target.name])\r\n  }\r\n  function getRole() {\r\n    for (let k = 0; k < enumData.length; k++) {\r\n      for (let d = 0; d < enumData[k].data.length; d++) {\r\n        if (fieldValue[\"userRole\"] === enumData[k].data[d].Id) {\r\n          return enumData[k].data[d].Text\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Collect data to create new user\r\n  function getFieldValuesKeycloakCreate() {\r\n    let data = {\r\n      username: fieldValue[\"username\"],\r\n      firstName: fieldValue[\"firstName\"],\r\n      lastName: fieldValue[\"lastName\"],\r\n      email: fieldValue[\"email\"] !== undefined ? fieldValue[\"email\"] : \"\",\r\n      emailVerified: true,\r\n      enabled: true,\r\n      requiredActions: [\"UPDATE_PASSWORD\"],\r\n      attributes:\r\n      {\r\n        locale: \"ru\",\r\n        organizationId: fieldValue[\"organizationId\"],\r\n        userId: \"12345\", // Will be replaced with id from cre3ated user in asist REST\r\n        userRole: fieldValue[\"userRole\"] !== undefined ? getRole() : \"\",\r\n        address: fieldValue[\"address\"] !== undefined ? fieldValue[\"address\"] : \"\",\r\n        phone: fieldValue[\"phone\"] !== undefined ? fieldValue[\"phone\"] : \"\",\r\n        signDocument: fieldValue[\"signDocument\"] !== undefined ? fieldValue[\"signDocument\"] : \"\",\r\n        changeStatus: fieldValue[\"changeStatus\"] !== undefined ? fieldValue[\"changeStatus\"] : \"\"\r\n      },\r\n      credentials: [\r\n        {\r\n          type: \"password\",\r\n          value: \"12345\"\r\n        }\r\n      ]\r\n    }\r\n    return data\r\n  }\r\n  // Collect data to create new user in REST\r\n  function getFieldValuesRest() {\r\n    var generator = require('generate-password');\r\n\r\n    var password = generator.generate({\r\n      length: 10,\r\n      numbers: true\r\n    })\r\n    let data = {\r\n      \"UserName\": fieldValue[\"username\"],\r\n      \"Password\": password,\r\n      \"LastName\": fieldValue[\"lastName\"],\r\n      \"FirstName\": fieldValue[\"firstName\"],\r\n      \"Address\": fieldValue[\"address\"] !== undefined ? fieldValue[\"address\"] : \"\",\r\n      \"Phone\": fieldValue[\"phone\"] !== undefined ? fieldValue[\"phone\"] : \"\",\r\n      \"Email\": fieldValue[\"email\"] !== undefined ? fieldValue[\"email\"] : \"\",\r\n      \"ParentId\": getParentId(),\r\n      \"OrgPositionId\": \"F464D1AD-C648-4302-8AAB-BCABBCC406E6\",\r\n      \"UserId\": userId, // Needs existing user id\r\n      \"Sex\": true,\r\n      \"LanguageId\": 4\r\n    }\r\n    return data\r\n  }\r\n  // Collect data to show user creating form\r\n  function getFieldValuesSelectedDoc() {\r\n    let data = {\r\n      username: fieldValue[\"username\"] !== undefined ? fieldValue[\"username\"] : \"\",\r\n      firstName: fieldValue[\"firstName\"] !== undefined ? fieldValue[\"firstName\"] : \"\",\r\n      lastName: fieldValue[\"lastName\"] !== undefined ? fieldValue[\"lastName\"] : \"\",\r\n      email: fieldValue[\"email\"] !== undefined ? fieldValue[\"email\"] : \"\",\r\n      attributes:\r\n      {\r\n        organizationId: [fieldValue[\"organizationId\"]],\r\n        userId: userId,\r\n        userRole: [getRole()],\r\n        address: [fieldValue[\"address\"] !== undefined ? fieldValue[\"address\"] : \"\"],\r\n        phone: [fieldValue[\"phone\"] !== undefined ? fieldValue[\"phone\"] : \"\"],\r\n        signDocument: [fieldValue[\"signDocument\"] !== undefined ? fieldValue[\"signDocument\"] : \"\"],\r\n        changeStatus: [fieldValue[\"changeStatus\"] !== undefined ? fieldValue[\"changeStatus\"] : \"\"]\r\n      }\r\n    }\r\n    return data\r\n  }\r\n  // Collect data to update existed user\r\n  function getFieldValuesKeycloakUpdate() {\r\n    let data = {\r\n      firstName: fieldValue[\"firstName\"],\r\n      lastName: fieldValue[\"lastName\"],\r\n      email: fieldValue[\"email\"],\r\n      emailVerified: true,\r\n      enabled: true,\r\n      attributes:\r\n      {\r\n        locale: \"ru\",\r\n        organizationId: fieldValue[\"organizationId\"],\r\n        userId: fieldValue[\"userId\"],\r\n        userRole: getRole(),\r\n        address: fieldValue[\"address\"],\r\n        phone: fieldValue[\"phone\"],\r\n        signDocument: fieldValue[\"signDocument\"],\r\n        changeStatus: fieldValue[\"changeStatus\"],\r\n      }\r\n    }\r\n    return data\r\n  }\r\n  // Collect data to reset existed user password\r\n  function getFieldValuesKeycloakResetPassword() {\r\n    let data = {\r\n      firstName: fieldValue[\"firstName\"],\r\n      lastName: fieldValue[\"lastName\"],\r\n      email: fieldValue[\"email\"],\r\n      emailVerified: true,\r\n      enabled: true,\r\n      requiredActions: [\"UPDATE_PASSWORD\"],\r\n      attributes:\r\n      {\r\n        locale: \"ru\",\r\n        organizationId: organizationId,\r\n        userId: fieldValue[\"userId\"],\r\n        userRole: getRole(),\r\n        address: fieldValue[\"address\"],\r\n        phone: fieldValue[\"phone\"]\r\n      },\r\n      credentials: [\r\n        {\r\n          type: \"password\",\r\n          value: \"12345\"\r\n        }\r\n      ]\r\n    }\r\n    return data\r\n  }\r\n  // Get Id of Org id created in asist and compare with local Org id by label\r\n  function getParentId() {\r\n    let orgId = null\r\n    for (let i = 0; i < enumData.length; i++) {\r\n      for (let l = 0; l < enumData[i].data.length; l++) {\r\n        if (fieldValue[\"organizationId\"] === enumData[i].data[l].Id) {\r\n          // console.log(\"ORG TEXT\", enumData[i].data[l].Text)\r\n          for (let n = 0; n < organizationIdList.length; n++) {\r\n            if (organizationIdList[n].Text === enumData[i].data[l].Text) {\r\n              // console.log(\"ParentID\", organizationIdList[n].Id)\r\n              // return organizationIdList[n].Id\r\n              orgId = organizationIdList[n].Id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if(orgId === null){\r\n      swAllert(\"Не найдена организация!\", \"warning\")\r\n    }\r\n    return orgId\r\n  }\r\n  \r\n  // Validate input data\r\n  function checkForWrongFields(commandJson) {\r\n    let enabledToSend = false\r\n    var parsedGridFormData = JSON.parse(props.docList)\r\n    if (fieldValue[\"userRole\"] !== undefined && fieldValue[\"userRole\"] !== \"\") {\r\n      if (fieldValue[\"organizationId\"] !== undefined && fieldValue[\"organizationId\"] !== \"\") {\r\n        if (fieldValue[\"username\"] !== undefined && fieldValue[\"username\"] !== \"\") {\r\n          if (fieldValue[\"firstName\"] !== undefined && fieldValue[\"firstName\"] !== \"\") {\r\n            if (fieldValue[\"lastName\"] !== undefined && fieldValue[\"lastName\"] !== \"\") {\r\n              for (let i = 0; i < parsedGridFormData.length; i++) {\r\n                if (parsedGridFormData[i].username === fieldValue[\"username\"]) {\r\n                  enabledToSend = false\r\n                  return swAllert(\"Пользователь с таким логином уже существует\", \"warning\")\r\n                } else enabledToSend = true\r\n              }\r\n            } else swAllert(\"Введите Имя\", \"warning\")\r\n          } else swAllert(\"Введите Фамилию\", \"warning\")\r\n        } else swAllert(\"Введите Логин\", \"warning\")\r\n      } else swAllert(\"Введите Наименование МСЭК\", \"warning\")\r\n    } else swAllert(\"Введите Роль\", \"warning\")\r\n    if (enabledToSend === true) {\r\n      sendFieldValues(commandJson)\r\n      clearTabData(process_id)\r\n      swAllert(\"Пользователь успешно создан!\", \"success\")\r\n    }\r\n  }\r\n  function swAllert(text, icon) {\r\n    return (\r\n      swal({\r\n        text: text,\r\n        icon: icon,\r\n        buttons: { ok: \"Ок\" },\r\n      })\r\n        .then((click) => {\r\n          if (click === \"ok\") {\r\n            console.log(\"CLICK OK\", click)\r\n          }\r\n        })\r\n    )\r\n  }\r\n  async function buttonClick(name, item) {\r\n    if (name === \"createUser\") {\r\n      let KeycloakDoc = getFieldValuesSelectedDoc()\r\n      let commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: session_id,\r\n        process_id: process_id,\r\n        taskID: taskID,\r\n        userId: userId,\r\n        userRole: userRole,\r\n        variables: {\r\n          authorization: { value: null },\r\n          userAction: { value: \"createUser\" },\r\n          selectedDoc: { value: JSON.stringify(KeycloakDoc) }\r\n        }\r\n      }\r\n      console.log(\"button createUser: \", commandJson)\r\n      sendFieldValues(commandJson)\r\n      clearTabData(process_id)\r\n    }\r\n    else if (name === \"saveUser\") {\r\n      let KeycloakDoc = getFieldValuesKeycloakCreate()\r\n      let RestDoc = getFieldValuesRest()\r\n      let commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: session_id,\r\n        process_id: process_id,\r\n        taskID: taskID,\r\n        userId: userId,\r\n        userRole: userRole,\r\n        variables: {\r\n          authorization: { value: null },\r\n          userAction: { value: \"saveUser\" },\r\n          keycloakUserData: { value: JSON.stringify(KeycloakDoc) },\r\n          restUserData: { value: JSON.stringify(RestDoc) }\r\n        }\r\n      }\r\n      console.log(\"button saveUser: \", commandJson)\r\n      checkForWrongFields(commandJson)\r\n    }\r\n    else if (name === \"findUser\") {\r\n      let newDocList = []\r\n      for (let i = 0; i < gridFormData.length; i++) {\r\n        let orgId = gridFormData[i].attributes.organizationId[0]\r\n        if (userRole === \"Администратор\") {\r\n          let user = {\r\n            id: gridFormData[i].id,\r\n            username: gridFormData[i].username,\r\n            firstName: gridFormData[i].firstName,\r\n            lastName: gridFormData[i].lastName,\r\n            email: gridFormData[i].email,\r\n            userRole: gridFormData[i].attributes.userRole[0],\r\n            userId: gridFormData[i].attributes.userId[0],\r\n            organizationId: gridFormData[i].attributes.organizationId[0],\r\n            address: gridFormData[i].attributes.address[0],\r\n            phone: gridFormData[i].attributes.phone[0]\r\n          }\r\n          newDocList.push(user)\r\n        }\r\n        else {\r\n          if (orgId === organizationId) {\r\n            let user = {\r\n              id: gridFormData[i].id,\r\n              username: gridFormData[i].username,\r\n              firstName: gridFormData[i].firstName,\r\n              lastName: gridFormData[i].lastName,\r\n              email: gridFormData[i].email,\r\n              userRole: gridFormData[i].attributes.userRole[0],\r\n              userId: gridFormData[i].attributes.userId[0],\r\n              organizationId: gridFormData[i].attributes.organizationId[0],\r\n              address: gridFormData[i].attributes.address[0],\r\n              phone: gridFormData[i].attributes.phone[0]\r\n            }\r\n            newDocList.push(user)\r\n          }\r\n        }\r\n\r\n      }\r\n      let filteredDocList = []\r\n      for (let i = 0; i < newDocList.length; i++) {\r\n        let mathedResult = false\r\n        for (let item in fieldValue) {\r\n          if (fieldValue[item] !== \"\") {\r\n            if (item === \"userRole\") {\r\n              for (let k = 0; k < selectedOptions.length; k++) {\r\n                if (fieldValue[item] === selectedOptions[k].value) {\r\n                  if (selectedOptions[k].label === newDocList[i][item]) {\r\n                    console.log(\"Find\", selectedOptions[k].label, newDocList[i][item])\r\n                    mathedResult = true\r\n                    break\r\n                  }\r\n                  else { mathedResult = false }\r\n                }\r\n                else { mathedResult = false }\r\n              }\r\n            }\r\n            else {\r\n              if (fieldValue[item] === newDocList[i][item]) {\r\n                mathedResult = true\r\n              }\r\n              else { mathedResult = false }\r\n            }\r\n          }\r\n        }\r\n        if (mathedResult === true) {\r\n          filteredDocList.push(newDocList[i])\r\n        }\r\n      }\r\n      setDocList(filteredDocList)\r\n    }\r\n    else if (name === \"editUser\") {\r\n      console.log(\"ITEM\", item)\r\n      let commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: session_id,\r\n        process_id: process_id,\r\n        taskID: taskID,\r\n        userId: userId,\r\n        userRole: userRole,\r\n        variables: {\r\n          authorization: { value: null },\r\n          userAction: { value: \"editUser\" },\r\n          keycloakUserId: { value: item.id }\r\n        }\r\n      }\r\n      console.log(\"button editUser: \", commandJson)\r\n      sendFieldValues(commandJson)\r\n      clearTabData(process_id)\r\n    }\r\n    else if (name === \"updateUser\") {\r\n      var userData = getFieldValuesKeycloakUpdate()\r\n      let commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: session_id,\r\n        process_id: process_id,\r\n        taskID: taskID,\r\n        userId: userId,\r\n        userRole: userRole,\r\n        variables: {\r\n          authorization: { value: null },\r\n          userAction: { value: \"updateUser\" },\r\n          keycloakUserId: { value: selectedDoc.id },\r\n          keycloakUserData: { value: JSON.stringify(userData) }\r\n        }\r\n      }\r\n      console.log(\"button updateUser:\", commandJson, item)\r\n      sendFieldValues(commandJson)\r\n      props.callSuccessToast(\"Пользователь обновлен!\", \"success\")\r\n      clearTabData(process_id)\r\n    }\r\n    else if (name === \"resetPassword\") {\r\n      swal({\r\n        text: \"Вы точно хотите сбросить пароль?\",\r\n        icon: \"warning\",\r\n        buttons: { ok: \"Да\", cancel: \"Отмена\" }\r\n      })\r\n        .then((click) => {\r\n          if (click === \"ok\") {\r\n            var userData = getFieldValuesKeycloakResetPassword()\r\n            let commandJson =\r\n            {\r\n              commandType: \"completeTask\",\r\n              session_id: session_id,\r\n              process_id: process_id,\r\n              taskID: taskID,\r\n              userId: userId,\r\n              userRole: userRole,\r\n              variables: {\r\n                authorization: { value: null },\r\n                userAction: { value: \"updateUser\" },\r\n                keycloakUserId: { value: selectedDoc.id },\r\n                keycloakUserData: { value: JSON.stringify(userData) }\r\n              }\r\n            }\r\n            sendFieldValues(commandJson)\r\n            swAllert(\"Пароль успешно сброшен!\", \"success\")\r\n            clearTabData(process_id)\r\n            console.log(\"button updateUser:\", commandJson, item)\r\n          }\r\n        })\r\n    }\r\n    else if (name === \"deleteUser\") {\r\n      swal({\r\n        text: \"Вы точно хотите удалить этот документ?\",\r\n        icon: \"warning\",\r\n        buttons: { yes: \"Да\", no: \"Нет\" },\r\n        dangerMode: true,\r\n      })\r\n        .then((click) => {\r\n          if (click === \"yes\") {\r\n            let commandJson =\r\n            {\r\n              commandType: \"completeTask\",\r\n              session_id: session_id,\r\n              process_id: process_id,\r\n              taskID: taskID,\r\n              userId: userId,\r\n              userRole: userRole,\r\n              variables: {\r\n                authorization: { value: null },\r\n                userAction: { value: \"deleteUser\" },\r\n                keycloakUserId: { value: selectedDoc.id }\r\n              }\r\n            }\r\n            console.log(\"button deleteUser:\", commandJson, item)\r\n            sendFieldValues(commandJson)\r\n            clearTabData(process_id)\r\n            props.callSuccessToast(\"Пользователь удален!\")\r\n          }\r\n        })\r\n\r\n    }\r\n    else if (name === \"back\") {\r\n      let commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: session_id,\r\n        process_id: process_id,\r\n        taskID: taskID,\r\n        userId: userId,\r\n        userRole: userRole,\r\n        variables: {\r\n          userAction: { value: \"back\" },\r\n        }\r\n      }\r\n      console.log(\"button back:\", commandJson)\r\n      sendFieldValues(commandJson)\r\n      clearTabData(process_id)\r\n    }\r\n    else if (name === \"cancel\") {\r\n      const commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        process_id: process_id,\r\n        session_id: session_id,\r\n        taskID: taskID,\r\n        userRole: userRole,\r\n        variables: {\r\n          userAction: { value: \"cancel\" },\r\n        }\r\n      }\r\n      console.log(\"button cancel: \", commandJson)\r\n      sendFieldValues(commandJson)\r\n      clearTabData(process_id)\r\n    }\r\n    else {\r\n      console.log(\"Button \", name)\r\n    }\r\n  }\r\n  function sectionBuilder(section, index) {\r\n    // creating table and label of section and components\r\n    return (\r\n      <MTable size=\"small\">\r\n        <TableHead>\r\n          <TableRow style={{ height: 30 }}>\r\n            <TableCell style={{\r\n              color: \"black\",\r\n              fontSize: 14,\r\n              backgroundColor: \"#D3D3FE\"\r\n            }}>{section.label}</TableCell>\r\n            <TableCell style={{ backgroundColor: \"#D3D3FE\" }}></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {section.contents.map((contentItem, index) => (\r\n            <TableRow style={{ height: 30, maxWidth: 200 }}>\r\n              {contentItem.label !== \"\" &&\r\n                <TableCell\r\n                  align=\"left\"\r\n                  style={{ maxWidth: 200 }}>\r\n                  {contentItem.label}\r\n                </TableCell>\r\n              }\r\n              <TableCell\r\n                align=\"left\"\r\n                style={{ maxWidth: 200, height: 30 }}\r\n              >{contentBuilder(contentItem)}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </MTable>\r\n    )\r\n  }\r\n  function contentBuilder(contentItem) {\r\n    // Creating components by it's type\r\n    if (contentItem.type === \"Text\") {\r\n      return (\r\n        <TextField\r\n          multiline\r\n          // onChange = {componentChange}\r\n          onBlur={handleTextChange}\r\n          name={contentItem.name}\r\n          style={{ minWidth: 250 }}\r\n          disabled={(formType === \"view\" || contentItem.edit === false) ? true : false}\r\n          defaultValue={(fieldValue[contentItem.name]) ? fieldValue[contentItem.name] : \"\"}\r\n        />\r\n      )\r\n    }\r\n\r\n    else if (contentItem.type === \"Enum\") {\r\n      let options = []\r\n      options.push({\r\n        \"value\": \"\",\r\n        \"label\": \"\",\r\n        \"name\": contentItem.name\r\n      })\r\n      for (let i = 0; i < enumData.length; i++) {\r\n        if (contentItem.enumDef === enumData[i].enumDef) {\r\n          for (let l = 0; l < enumData[i].data.length; l++) {\r\n            options.push({\r\n              \"value\": enumData[i].data[l].Id,\r\n              \"label\": enumData[i].data[l].Text,\r\n              \"name\": contentItem.name\r\n            })\r\n          }\r\n        }\r\n      }\r\n      let selectedOption = {\r\n        \"value\": \"\",\r\n        \"label\": \"\",\r\n        \"name\": contentItem.name\r\n      }\r\n      // console.log(\"ORG\", contentItem.name, fieldValue[contentItem.name], organizationId)\r\n      if (fieldValue[contentItem.name] !== undefined) {\r\n        for (let i = 0; i < options.length; i++) {\r\n          if (fieldValue[contentItem.name] === options[i].value) {\r\n            selectedOption = options[i]\r\n            // console.log(\"OPT\", options[i])\r\n            break\r\n          }\r\n        }\r\n      }\r\n      if (selectedOptions.length !== 0) {\r\n        for (let i = 0; i < selectedOptions.length; i++) {\r\n          if (contentItem.name === selectedOptions[i].name) {\r\n            selectedOption = selectedOptions[i]\r\n          }\r\n        }\r\n      }\r\n      return (\r\n        <Select\r\n          name={contentItem.name}\r\n          // value = {() => setSelectedOption(options, contentItem.name)}\r\n          value={selectedOption}\r\n          onChange={handleSelectChange}\r\n          style={{ height: 30, minWidth: 150, menuPortal: base => ({ ...base, zIndex: 9999 })}}\r\n          options={options}\r\n          isDisabled={(formType === \"view\" || contentItem.edit === false) ? true : false}\r\n        />\r\n      )\r\n    }\r\n    else if (contentItem.type === \"Bool\") {\r\n      return (\r\n        <Checkbox\r\n          style={{ maxWidth: 20, height: 15, color: (formType === \"view\" || contentItem.edit === false) ? \"grey\" : \"green\" }}\r\n          name={contentItem.name}\r\n          onChange={handleCheckboxChange}\r\n          disabled={(formType === \"view\" || contentItem.edit === false) ? true : false}\r\n          checked={(fieldValue[contentItem.name] === \"true\" || fieldValue[contentItem.name] === true) ? true : false}\r\n        />\r\n      )\r\n    }\r\n    // else if(contentItem.type === \"Password\"){\r\n    //   return(\r\n    //     <OutlinedInput\r\n    //       name = {contentItem.name}\r\n    //       id=\"outlined-adornment-password\"\r\n    //       type={values.showPassword ? 'text' : 'password'}\r\n    //       value={values[contentItem.name]}\r\n    //       // onChange = {handlePasswordChange(contentItem.name)}\r\n    //       style={{height: 35}}\r\n    //       onBlur = {handleTextChange}\r\n    //       endAdornment={\r\n    //         <InputAdornment position=\"end\">\r\n    //           <IconButton\r\n    //             aria-label=\"toggle password visibility\"\r\n    //             onClick={handleClickShowPassword}\r\n    //             // onMouseDown={handleMouseDownPassword}\r\n    //             edge=\"end\"\r\n    //           >\r\n    //             {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n    //           </IconButton>\r\n    //         </InputAdornment>\r\n    //       }\r\n    //     />\r\n    //   )\r\n    // }\r\n  }\r\n  function getGridFormItems(value, type) {\r\n    if (type === \"Enum\") {\r\n      for (let i = 0; i < enumData.length; i++) {\r\n        for (let l = 0; l < enumData[i].data.length; l++) {\r\n          if (enumData[i].data[l].Id === value) {\r\n            return enumData[i].data[l].Text\r\n          }\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  }\r\n  console.log(\"UserForm props\", props)\r\n  console.log(\"FIELDS\", fieldValue)\r\n  console.log(\"SOP\", selectedOptions)\r\n  if (docList === null) {\r\n    filterDocList()\r\n  }\r\n  if (docList !== null)\r\n    try {\r\n      return (\r\n        <Grid>\r\n          <Grid container direction=\"row\" justify=\"flex-start\" spacing={1}>\r\n            <Grid item xs={10}>\r\n              <Card>\r\n                <MTable>\r\n                  <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <TableHead>\r\n                      <TableRow style={{ maxHeight: 25 }}>\r\n                        <TableCell style={{ fontSize: 16, color: \"black\" }}>{Form.label}</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                  </Grid>\r\n                  <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    {Form.sections.map((section, index) => {\r\n                      return sectionBuilder(section, index)\r\n                    })}\r\n                  </Grid>\r\n                  <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n                    {buttons.map((button, index) =>\r\n                      // return createButton(button, index)\r\n                      <Button\r\n                        name={button.name}\r\n                        variant=\"outlined\"\r\n                        // id={dataItem.id}\r\n                        value={button.name}\r\n                        onClick={() => buttonClick(button.name, null)}\r\n                        style={{\r\n                          margin: 3,\r\n                          backgroundColor: button.backgroundColor,\r\n                          height: 32,\r\n                          fontSize: 12\r\n                        }}\r\n                      >{button.label}\r\n                      </Button>\r\n                    )}\r\n                  </Grid>\r\n                </MTable>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          <br></br>\r\n          {Object.keys(docList).length !== 0 &&  // DocListData\r\n            <Grid container direction=\"row\" justify=\"flex-start\" spacing={0}>\r\n              <Grid item sm={\"auto\"}>\r\n                <Card>\r\n                  <Paper>\r\n                    <Table bordered size=\"small\">\r\n                      <TableHead style={{ backgroundColor: \"#D3D3FE\" }}>\r\n                        <tr>\r\n                          <th colSpan=\"1\"></th>\r\n                          {gridForm.sections.map((section, index) => {\r\n                            return (\r\n                              <th colSpan={section.contents.length} style={{ color: \"black\", fontSize: 13 }}>{section.label}</th>\r\n                            )\r\n                          })}\r\n                        </tr>\r\n                        <tr>\r\n                          <th rowSpan=\"2\" style={{ color: \"black\", fontSize: 12, minWidth: 75 }}>Действие</th>\r\n                        </tr>\r\n                        <tr>\r\n                          {gridForm.sections.map(section =>\r\n                            section.contents.map((contentItem, index) => {\r\n                              return (\r\n                                <th rowSpan=\"2\" style={{ color: \"black\", fontSize: 12 }}>{contentItem.label}</th>\r\n                              )\r\n                            })\r\n                          )}\r\n                        </tr>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {docList.map((dataItem, index) => (\r\n                          <tr style={{ height: 30 }}>\r\n                            <td style={{ maxWidth: 50 }}>\r\n                              {gridFormButtons !== null &&\r\n                                gridFormButtons.map((button, index) =>\r\n                                  <Button\r\n                                    name={button.name}\r\n                                    variant=\"outlined\"\r\n                                    // id={dataItem.id}\r\n                                    value={button.name}\r\n                                    onClick={() => buttonClick(button.name, dataItem)}\r\n                                    style={{\r\n                                      margin: 1,\r\n                                      height: 24,\r\n                                      fontSize: 9,\r\n                                      maxWidth: 32,\r\n                                      backgroundColor: button.backgroundColor\r\n                                    }}\r\n                                  >{button.label}\r\n                                  </Button>\r\n                                )}\r\n                            </td>\r\n                            {gridForm.sections.map(section => {\r\n                              return (\r\n                                section.contents.map(contentItem => {\r\n                                  for (let key in dataItem) {\r\n                                    if (key === contentItem.name) {\r\n                                      if (dataItem[key] === null || dataItem[key] === \"\") {\r\n                                        return (\r\n                                          <td align=\"center\" style={{ color: \"black\", fontSize: 12 }}>-</td>\r\n                                        )\r\n                                      }\r\n                                      else {\r\n                                        return (\r\n                                          <td align=\"center\" style={{ color: \"black\", fontSize: 12 }}>\r\n                                            {/* {dataItem[key]} */}\r\n                                            {getGridFormItems(dataItem[key], contentItem.type)}\r\n                                          </td>\r\n                                        )\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                })\r\n                              )\r\n                            })}\r\n                          </tr>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </Paper>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          }\r\n\r\n        </Grid>\r\n      )\r\n    } catch (error) {\r\n      console.log(\"ERROR\", error)\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}