{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Serj\\\\Desktop\\\\ismse\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Serj\\\\Desktop\\\\ismse\\\\src\\\\components\\\\GridForm\\\\GridForm.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\"; // @material-ui/core components\n// import Table from \"@material-ui/core/Table\";\n\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport LinearProgress from '@material-ui/core/LinearProgress'; // import TextField from \"@material-ui/core\";\n// import IconButton from '@material-ui/core/IconButton';\n// import KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\n// import KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\n\nimport FirstPageIcon from '@material-ui/icons/FirstPage'; // import LastPageIcon from '@material-ui/icons/LastPage';\n\nimport TableFooter from '@material-ui/core/TableFooter';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl'; // import OutlinedInput from '@material-ui/core/OutlinedInput';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport swal from 'sweetalert'; // https://sweetalert.js.org/guides/\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\n\nimport { Table } from 'reactstrap';\nimport TableToExcel from \"@linways/table-to-excel\"; // https://github.com/linways/table-to-excel\n\nimport Tooltip from '@material-ui/core/Tooltip'; // import { SnackbarProvider, useSnackbar } from 'notistack';\n\nimport Snackbar from '@material-ui/core/Snackbar';\n\nclass GridForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonClick = (name, dataItem) => {\n      if (name === \"deleteIPR\") {\n        // console.log(\"DATA\", dataItem)\n        for (let i = 0; i < dataItem.attributes.length; i++) {\n          if (dataItem.attributes[i].name === \"AdultsMedicalCart\") {\n            const filterDocument = {\n              attributes: [{\n                name: \"AdultsMedicalCart\",\n                value: dataItem.attributes[i].value,\n                type: \"Doc\"\n              }]\n            };\n            const commandJson = {\n              commandType: \"completeTask\",\n              session_id: this.state.session_id,\n              process_id: this.state.process_id,\n              taskID: this.state.taskID,\n              variables: {\n                userAction: {\n                  value: \"deleteIPR\"\n                },\n                userId: {\n                  value: this.state.userId\n                },\n                userRole: {\n                  value: this.state.userRole\n                },\n                docDefId: {\n                  value: this.state.Form.docDefId\n                },\n                doc: {\n                  value: JSON.stringify(filterDocument)\n                },\n                medicalCardId: {\n                  value: this.props.medicalCardId\n                },\n                docId: {\n                  value: dataItem.id\n                },\n                size: {\n                  value: 10\n                },\n                page: {\n                  value: 1\n                }\n              }\n            };\n            swal({\n              text: \"Вы точно хотите удалить этот ИПР\",\n              icon: \"warning\",\n              buttons: {\n                yes: \"Да\",\n                no: \"Нет\"\n              },\n              dangerMode: true\n            }).then(click => {\n              if (click === \"yes\") {\n                for (let k = 0; k < dataItem.attributes.length; k++) {\n                  if (dataItem.attributes[k].name === \"State\") {\n                    if (dataItem.attributes[k].value === \"Утвержден (подписан)\") {\n                      swal({\n                        text: \"Вы не можете удалять подписанные документы\",\n                        icon: \"warning\",\n                        buttons: {\n                          ok: \"Ок\"\n                        } // dangerMode: true,\n\n                      });\n                    } else {\n                      console.log(\"button deleteIPR: \", commandJson);\n                      this.sendFieldValues(commandJson);\n                    }\n                  }\n                }\n              } else {\n                console.log(\"CLICK\", click);\n              }\n            });\n          }\n        }\n      } else if (name === \"openMedakt\") {\n        const filterDocument = {\n          attributes: [{\n            name: \"AdultsMedicalCart\",\n            value: dataItem.id,\n            type: \"Doc\"\n          }]\n        };\n        const commandJson = {\n          commandType: \"completeTask\",\n          session_id: this.state.session_id,\n          process_id: this.state.process_id,\n          taskID: this.state.taskID,\n          variables: {\n            userAction: {\n              value: \"openMedakt\"\n            },\n            userId: {\n              value: this.state.userId\n            },\n            userRole: {\n              value: this.state.userRole\n            },\n            // docDefId:{value: this.state.Form.docDefId},\n            doc: {\n              value: JSON.stringify(filterDocument)\n            },\n            medicalCardId: {\n              value: this.props.medicalCardId\n            },\n            personId: {\n              value: this.getPersonId(dataItem)\n            },\n            docId: {\n              value: dataItem.id\n            },\n            size: {\n              value: 10\n            },\n            page: {\n              value: 1\n            }\n          }\n        };\n        console.log(\"button openMedakt: \", commandJson);\n        this.sendFieldValues(commandJson);\n      } else if (name === \"editIPR\") {\n        const commandJson = {\n          commandType: \"completeTask\",\n          session_id: this.state.session_id,\n          process_id: this.state.process_id,\n          taskID: this.state.taskID,\n          variables: {\n            userAction: {\n              value: name\n            },\n            docId: {\n              value: dataItem.id\n            },\n            docDefId: {\n              value: this.state.Form.docDefId\n            },\n            personId: {\n              value: this.getPersonId(dataItem)\n            },\n            userId: {\n              value: this.state.userId\n            },\n            userRole: {\n              value: this.state.userRole\n            }\n          }\n        };\n        console.log(\"button editIPR: \", commandJson);\n        this.sendFieldValues(commandJson);\n      } else if (name === \"selectDocumentToTransfer\") {\n        let medakt = {\n          attributes: [// {\n          //   name: \"MseName\",\n          //   type: \"Enum\",\n          //   value: this.state.organizationId\n          // },\n          {\n            name: \"Person\",\n            type: \"Doc\",\n            value: dataItem.id\n          }]\n        };\n        let age = this.getPersonAge(dataItem);\n        let docDefId = age >= 18 ? this.state.Form.adultsMedaktDocDefId : this.state.Form.childMedaktDocDefId;\n        let IPR = {\n          attributes: [{\n            name: \"AdultsMedicalCart\",\n            type: \"Doc\",\n            docDef: docDefId,\n            subDocument: {\n              attributes: [// {\n              //   name: \"MseName\",\n              //   type: \"Enum\",\n              //   value: this.state.organizationId\n              // },\n              {\n                name: \"Person\",\n                type: \"Doc\",\n                value: dataItem.id\n              }]\n            }\n          }]\n        };\n\n        if (this.state.userRole !== \"Администратор\") {\n          medakt.attributes.push({\n            name: \"MseName\",\n            type: \"Enum\",\n            value: this.state.organizationId\n          });\n          IPR.attributes[0].subDocument.attributes.push({\n            name: \"MseName\",\n            type: \"Enum\",\n            value: this.state.organizationId\n          });\n        }\n\n        let commandJson = {\n          commandType: \"completeTask\",\n          session_id: this.state.session_id,\n          process_id: this.state.process_id,\n          taskID: this.state.taskID,\n          variables: {\n            userAction: {\n              value: name\n            },\n            medakt: {\n              value: JSON.stringify(medakt)\n            },\n            medaktDefId: {\n              value: docDefId\n            },\n            IPR: {\n              value: JSON.stringify(IPR)\n            },\n            userId: {\n              value: this.state.userId\n            }\n          }\n        };\n        console.log(\"button selectDocumentToTransfer: \", commandJson);\n        this.sendFieldValues(commandJson);\n      } else if (name === \"selectDocument\") {\n        let age = this.getPersonAge(dataItem);\n        let docDefId = age >= 18 ? this.state.Form.adultsMedaktDocDefId : this.state.Form.childMedaktDocDefId;\n        let adult = age >= 18 ? \"True\" : \"False\";\n        let existedState = this.getCurrentDocumentState(dataItem);\n        let curDocState = \"False\";\n\n        if (existedState === \"Утвержден\" || existedState === \"Отказан\") {\n          curDocState = \"True\";\n        }\n\n        const commandJson = {\n          commandType: \"completeTask\",\n          session_id: this.state.session_id,\n          process_id: this.state.process_id,\n          taskID: this.state.taskID,\n          variables: {\n            userAction: {\n              value: name\n            },\n            adult: {\n              value: adult\n            },\n            docDefId: {\n              value: docDefId\n            },\n            userId: {\n              value: this.state.userId\n            },\n            docId: {\n              value: dataItem.id\n            },\n            docStateDefined: {\n              value: curDocState\n            }\n          }\n        };\n        console.log(\"button selectDocument: \", commandJson);\n        this.sendFieldValues(commandJson);\n        this.clearTabData(this.state.process_id);\n      } else if (name === \"deleteDocument\") {\n        for (let k = 0; k < dataItem.attributes.length; k++) {\n          if (dataItem.attributes[k].name === \"State\") {\n            // if (dataItem.attributes[k].value === \"Утвержден (подписан)\") {\n            //   this.props.callErrorToast(\"Вы не можете удалять подписанные документы!\")\n            // }\n            // else {\n            swal({\n              text: \"Вы точно хотите удалить этот документ?\",\n              icon: \"warning\",\n              buttons: {\n                yes: \"Да\",\n                no: \"Нет\"\n              },\n              dangerMode: true\n            }).then(click => {\n              if (click === \"yes\") {\n                const commandJson = {\n                  commandType: \"completeTask\",\n                  session_id: this.state.session_id,\n                  process_id: this.state.process_id,\n                  taskID: this.state.taskID,\n                  variables: {\n                    userAction: {\n                      value: name\n                    },\n                    docId: {\n                      value: dataItem.id\n                    },\n                    personId: {\n                      value: this.getPersonId(dataItem)\n                    },\n                    userId: {\n                      value: this.state.userId\n                    },\n                    userRole: {\n                      value: this.state.userRole\n                    }\n                  }\n                };\n                this.sendFieldValues(commandJson);\n                this.clearTabData(this.state.process_id);\n                console.log(\"button deleteDocument: \", commandJson);\n              }\n            }); // }\n          }\n        }\n      } else {\n        const commandJson = {\n          commandType: \"completeTask\",\n          session_id: this.state.session_id,\n          process_id: this.state.process_id,\n          taskID: this.state.taskID,\n          variables: {\n            userAction: {\n              value: name\n            },\n            docId: {\n              value: dataItem.id\n            },\n            personId: {\n              value: this.getPersonId(dataItem)\n            },\n            userId: {\n              value: this.state.userId\n            },\n            userRole: {\n              value: this.state.userRole\n            }\n          }\n        };\n        console.log(\"button \", name, commandJson);\n        this.sendFieldValues(commandJson);\n        this.clearTabData(this.state.process_id);\n      }\n    };\n\n    this.handleChange = event => {\n      let newValue = parseInt(event.target.value);\n      this.setState({\n        page: newValue\n      });\n    };\n\n    this.handleChangeRowsPerPage = event => {\n      if (this.state.gridFormData.length < this.state.size && event.target.value > this.state.gridFormData.length) {\n        this.setState({\n          snackBarMessage: \"Других записей нет!\"\n        });\n        this.setState({\n          showSnackBar: true\n        });\n      } else {\n        this.setState({\n          size: event.target.value\n        });\n        this.props.rowsPageChange(event.target.value, this.state.page); // console.log(\"Rows amount changed: \", event.target.value)\n      }\n    };\n\n    this.state = {\n      gridFormData: null,\n      docListIPR: null,\n      fieldValue: {},\n      process_id: null,\n      session_id: null,\n      organizationId: null,\n      buttons: null,\n      gridFormButtons: null,\n      taskID: null,\n      userId: null,\n      userRole: null,\n      Form: null,\n      SOAT: null,\n      page: 1,\n      size: 10,\n      tableUniqueId: null,\n      showSnackBar: false,\n      snackBarMessage: \"\"\n    };\n    this.buttonClick = this.buttonClick.bind(this);\n    this.sendFieldValues = this.sendFieldValues.bind(this);\n    this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\n    this.KeyboardArrowRightClick = this.KeyboardArrowRightClick.bind(this);\n    this.setDataFromProps = this.setDataFromProps.bind(this);\n    this.handleCloseCurrentTab = this.handleCloseCurrentTab.bind(this);\n    this.clearTabData = this.clearTabData.bind(this);\n  }\n\n  sendFieldValues(commandJson) {\n    this.props.sendFieldValues(commandJson);\n  }\n\n  clearTabData(process_id) {\n    this.props.clearTabData(process_id);\n  }\n\n  async componentDidMount() {\n    if (this.state.process_id === null) {\n      console.log(\"GridForm PROPS\", this.props);\n      this.setDataFromProps();\n    }\n  }\n\n  async componentDidUpdate() {\n    if (this.state.process_id === null) {\n      this.setDataFromProps();\n    }\n  } // Set data from props to local state\n\n\n  async setDataFromProps() {\n    let fstate = this.state;\n\n    if (this.props.docList !== undefined && this.props.docList !== \"[]\" && this.props.docList !== null) {\n      let docList = this.props.docList;\n      fstate.gridFormData = docList;\n    }\n\n    if (this.props.docListIPR !== undefined && this.props.docListIPR !== \"[]\" && this.props.docListIPR !== null) {\n      let docListIPR = this.props.docListIPR;\n      fstate.gridFormData = docListIPR; // fstate.size = docListIPR.length\n    }\n\n    if (this.props.page !== undefined && this.props.page !== \"null\") {\n      fstate.page = parseInt(this.props.page);\n    }\n\n    if (this.props.size !== undefined && this.props.size !== \"null\") {\n      fstate.size = parseInt(this.props.size);\n    }\n\n    if (this.props.gridFormButtons !== undefined && this.props.gridFormButtons !== null) {\n      fstate.gridFormButtons = this.props.gridFormButtons;\n    }\n\n    if (this.props.SOAT !== undefined) {\n      fstate.SOAT = this.props.SOAT;\n    }\n\n    fstate.tableUniqueId = this.getUUID();\n    fstate.taskID = this.props.taskID;\n    fstate.session_id = this.props.session_id;\n    fstate.process_id = this.props.process_id;\n    fstate.organizationId = this.props.organizationId;\n    fstate.Form = this.props.Form;\n    fstate.userId = this.props.userId;\n    fstate.userRole = this.props.userRole;\n    this.setState(fstate);\n  }\n\n  getUUID() {\n    const uuidv1 = require(\"uuid/v1\");\n\n    return uuidv1();\n  }\n\n  handleCloseCurrentTab(process_id) {\n    this.props.handleCloseCurrentTab(process_id);\n  } // getDate(date){\n  //   var newDate = new Date(date)\n  //   var dd = String(newDate.getDate()).padStart(2, '0')\n  //   var mm = String(newDate.getMonth() + 1).padStart(2, '0') //January is 0!\n  //   var yyyy = newDate.getFullYear()\n  //   var convertedDate = dd + '-' + mm + '-' + yyyy\n  //   return convertedDate\n  // }\n  // Find and return id of person document\n\n\n  getPersonId(dataItem) {\n    if (this.state.Form.formName === \"IPRGridForm\") {\n      for (let i = 0; i < dataItem.attributes.length; i++) {\n        if (dataItem.attributes[i].name === \"AdultsMedicalCart\") {\n          for (let l = 0; l < dataItem.attributes[i].subDocument.attributes.length; l++) {\n            if (dataItem.attributes[i].subDocument.attributes[l].name === \"Person\") {\n              return dataItem.attributes[i].subDocument.attributes[l].value;\n            }\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < dataItem.attributes.length; i++) {\n        if (dataItem.attributes[i].name === \"Person\") {\n          return dataItem.attributes[i].value;\n        }\n      }\n    }\n  } // Date parser for function getPersonAge\n\n\n  parseDate(date) {\n    if (date !== undefined) {\n      var dd = date.substring(0, 2);\n      var mm = date.substring(3, 5);\n      var yyyy = date.substring(6, 10);\n      var convertedDate = String(yyyy + '-' + mm + '-' + dd);\n      var newDate = new Date(convertedDate); // \"2017-01-26\"\n\n      dd = String(newDate.getDate()).padStart(2, '0');\n      mm = String(newDate.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n      yyyy = newDate.getFullYear();\n      convertedDate = yyyy + '-' + mm + '-' + dd;\n    }\n\n    return convertedDate;\n  } // Function returns full age of person by its birthday\n\n\n  getPersonAge(dataItem) {\n    for (var i = 0; i < dataItem.attributes.length; i++) {\n      if (dataItem.attributes[i].name === \"Date_of_Birth\") {\n        var birthday = new Date(this.parseDate(dataItem.attributes[i].value)); // console.log(\"birthday\" , birthday)\n\n        var ageDifMs = Date.now() - birthday.getTime();\n        var ageDate = new Date(ageDifMs); // miliseconds from epoch\n\n        var fullAge = Math.abs(ageDate.getUTCFullYear() - 1970); // console.log(\"AGE\" , fullAge)\n\n        return fullAge;\n      }\n    }\n  } // Function returns existaed state of selected document\n\n\n  getCurrentDocumentState(dataItem) {\n    for (var i = 0; i < dataItem.attributes.length; i++) {\n      if (dataItem.attributes[i].name === \"State\") {\n        var docState = dataItem.attributes[i].value;\n        return docState;\n      }\n    }\n  }\n\n  handleCloseSnackBar() {\n    this.setState({\n      showSnackBar: false\n    });\n  } // Handler of buttons click inside the grid form\n\n\n  // Handle prev page button click\n  KeyboardArrowLeftClick(page) {\n    if (page !== 1 && this.state.page !== 1) {\n      var prevPage = page - 1;\n      this.setState({\n        page: prevPage\n      });\n      this.props.rowsPageChange(this.state.size, prevPage);\n      console.log(\"Page changed: \", prevPage);\n    } else {\n      this.setState({\n        snackBarMessage: \"Вы на первой странице!\"\n      });\n      this.setState({\n        showSnackBar: true\n      });\n    }\n  } // Handle next page button click\n\n\n  KeyboardArrowRightClick(page) {\n    if (this.state.gridFormData.length < this.state.size) {\n      this.setState({\n        snackBarMessage: \"Других записей нет!\"\n      });\n      this.setState({\n        showSnackBar: true\n      });\n    } else {\n      var nextPage = page + 1;\n      this.setState({\n        page: nextPage\n      });\n      this.props.rowsPageChange(this.state.size, nextPage);\n      console.log(\"Page changed: \", nextPage);\n    }\n  }\n\n  GoToPage() {\n    this.props.rowsPageChange(this.state.size, this.state.page);\n  } // Handler of amount of rows per page\n\n\n  // Get name of address by its code\n  getAddressData(code, name) {\n    // console.log(\"CODE\", code)\n    for (var i = 0; i < this.state.SOAT.countries.length; i++) {\n      if (code === this.state.SOAT.countries[i].code && name === \"Country\") {\n        return this.state.SOAT.countries[i].name;\n      } else {\n        for (var j = 0; j < this.state.SOAT.countries[i].regions.length; j++) {\n          if (code === this.state.SOAT.countries[i].regions[j].code && name === \"Region\") {\n            return this.state.SOAT.countries[i].regions[j].name;\n          } else {\n            for (var k = 0; k < this.state.SOAT.countries[i].regions[j].districts.length; k++) {\n              if (code === this.state.SOAT.countries[i].regions[j].districts[k].code && name === \"District\") {\n                return this.state.SOAT.countries[i].regions[j].districts[k].name;\n              } else {\n                if (this.state.SOAT.countries[i].regions[j].districts[k].subDistricts !== undefined) {\n                  for (var l = 0; l < this.state.SOAT.countries[i].regions[j].districts[k].subDistricts.length; l++) {\n                    if (code === this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].code && name === \"subDistrict\") {\n                      return this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].name;\n                    } else {\n                      if (this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages !== undefined) {\n                        for (var m = 0; m < this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages.length; m++) {\n                          if (code === this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages[m].code && name === \"Village\") {\n                            return this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages[m].name;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } // Return value by type of component\n\n\n  getGridFormItems(item) {\n    if (item.name === \"Region\" || item.name === \"District\" || item.name === \"subDistrict\" || item.name === \"Village\") {\n      return this.getAddressData(item.value, item.name); // return item.enumValueText\n    } else {\n      if (item.type === \"Enum\") {\n        return item.enumValueText;\n      } else if (item.type === \"DateTime\") {\n        return item.value.substring(0, 10);\n      } // else if (item.type === \"DateTime\") {\n      //   // Convert date to appropriate format\n      //   if (item !== undefined) {\n      //     var dd = item.value.substring(0, 2)\n      //     var mm = item.value.substring(3, 5)\n      //     var yyyy = item.value.substring(6, 10)\n      //     var convertedDate = String(yyyy + '-' + mm + '-' + dd)\n      //     var newDate = new Date(convertedDate) // \"2017-01-26\"\n      //     dd = String(newDate.getDate()).padStart(2, '0')\n      //     mm = String(newDate.getMonth() + 1).padStart(2, '0') //January is 0!\n      //     yyyy = newDate.getFullYear()\n      //     convertedDate = dd + '-' + mm + '-' + yyyy\n      //     return convertedDate\n      //   }\n      // }\n      else if (item.type === \"Bool\") {\n          return React.createElement(Checkbox, {\n            style: {\n              maxWidth: 20,\n              height: 15,\n              color: \"grey\"\n            },\n            name: item.name,\n            disabled: true,\n            checked: item.value === \"True\" ? true : false,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 591\n            },\n            __self: this\n          });\n        } else {\n          return item.value;\n        }\n    }\n  }\n\n  downloadExcel() {\n    TableToExcel.convert(document.getElementById(this.state.tableUniqueId));\n  } // Define colums width to download grid form into ecel\n\n\n  getColsWidth() {\n    let iprGridFormColsWidth = \"20, 15, 16, 30, 15, 15, 17, 17, 16, 19, 19, 19, 14, 16, 16, 13, 18, 18, 18, 15, 15, 15, 15, 20, 25, 20, 18, 15, 15, 15, 15, 15\";\n    let registrationGridFormColsWidth = \"20, 15, 16, 30, 15, 15, 17, 17, 16, 19, 19, 19, 14, 16, 13, 18\";\n    let medaktGridFormColsWidth = \"20, 15, 16, 30, 15, 15, 15, 17, 17, 16, 19, 19, 19, 14, 16, 13, 18, 18, 18, 15\";\n    let complaintsGridFormColsWidth = \"20, 16, 16, 16, 17, 13, 13, 13, 19, 25\";\n    let appealsGridFormColsWidth = \"20, 16, 16, 16, 17, 13, 13, 13, 19, 25, 25\";\n\n    if (this.state.Form.formName === \"IPRGridForm\") {\n      return iprGridFormColsWidth;\n    } else if (this.state.Form.formName === \"adultsRegistrationGridForm\") {\n      return registrationGridFormColsWidth;\n    } else if (this.state.Form.formName === \"complaintsGridForm\") {\n      return complaintsGridFormColsWidth;\n    } else if (this.state.Form.formName === \"appealsGridForm\") {\n      return appealsGridFormColsWidth;\n    } else {\n      return medaktGridFormColsWidth;\n    }\n  }\n\n  render() {\n    try {\n      if (!this.state.userId) return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632\n        },\n        __self: this\n      });else if (!this.state.session_id) return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633\n        },\n        __self: this\n      });else if (!this.state.process_id) return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634\n        },\n        __self: this\n      });else if (!this.state.taskID) return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635\n        },\n        __self: this\n      });\n      return React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"flex-start\",\n        spacing: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        sm: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640\n        },\n        __self: this\n      }, this.state.Form.formName === \"documentViewForm\" ? React.createElement(Table, {\n        \"data-cols-width\": \"15, 11, 11, 11, 15, 15, 15, 15, 12, 22, 32, 7, 10, 25, 13\",\n        bordered: true,\n        id: this.state.tableUniqueId,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        style: {\n          backgroundColor: \"#D3D3FE\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        \"data-exclude\": \"true\",\n        key: \"action\",\n        style: {\n          color: \"black\",\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649\n        },\n        __self: this\n      }, \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0435\"), this.state.Form.attributes.map((attribute, index) => React.createElement(TableCell, {\n        \"data-b-a-s\": \"thin\",\n        \"data-f-bold\": \"true\",\n        style: {\n          color: \"black\",\n          fontSize: 13\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651\n        },\n        __self: this\n      }, attribute.caption)))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655\n        },\n        __self: this\n      }, this.state.gridFormData.map((dataItem, index) => React.createElement(TableRow, {\n        style: {\n          height: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        \"data-exclude\": \"true\",\n        style: {\n          maxWidth: 50\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658\n        },\n        __self: this\n      }, this.state.gridFormButtons.map((button, index) => React.createElement(Button, {\n        variant: \"outlined\",\n        onClick: () => this.buttonClick(button.name, dataItem),\n        style: {\n          margin: 1,\n          height: 24,\n          fontSize: 9,\n          maxWidth: 32,\n          backgroundColor: button.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660\n        },\n        __self: this\n      }, button.label))), this.state.Form.attributes.map((formAttribute, index) => dataItem.attributes.map((dataItemAttr, index) => {\n        if (dataItemAttr.name === formAttribute.name) {\n          if (dataItemAttr.value === null) return React.createElement(TableCell, {\n            align: \"left\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 679\n            },\n            __self: this\n          }, \"-\");else return React.createElement(TableCell, {\n            align: \"left\",\n            style: {\n              whiteSpace: \"nowrap\",\n              textOverflow: \"hidden\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 682\n            },\n            __self: this\n          }, this.getGridFormItems(dataItemAttr));\n        } else return null;\n      })))))) : React.createElement(Table, {\n        \"data-cols-width\": this.getColsWidth() // Статус\t№ регистрации\t№ акта по МСЭК\tНаименование МСЭ\tИнвалидность установлена с\tИнвалидность установлена по\t\n        // Дата регистрации\tФамилия\tИмя\tОтчество\tПИН\tДата рождения\tПол\tОбласть\tРайон/город\tДжаомат\tСело\tДом/кв/ул\tТелефон\n        ,\n        bordered: true,\n        id: this.state.tableUniqueId,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        style: {\n          backgroundColor: \"#D3D3FE\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        \"data-exclude\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705\n        },\n        __self: this\n      }), this.state.Form.sections.map((section, index) => {\n        // Build 1rst row of header\n        return React.createElement(\"td\", {\n          \"data-b-a-s\": \"thin\",\n          \"data-f-bold\": \"true\",\n          colSpan: section.contents.length,\n          key: index,\n          style: {\n            color: \"black\",\n            fontSize: 13\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 709\n          },\n          __self: this\n        }, section.label);\n      })), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        \"data-exclude\": \"true\",\n        key: \"action\",\n        style: {\n          color: \"black\",\n          fontSize: 14,\n          minWidth: 50\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714\n        },\n        __self: this\n      }, \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0435\"), this.state.Form.sections.map(section => section.contents.map((contentItem, index) => {\n        // Build 2nd row of header\n        return React.createElement(\"td\", {\n          \"data-f-bold\": \"true\",\n          \"data-a-wrap\": \"true\",\n          \"data-b-a-s\": \"thin\",\n          \"data-a-h\": \"justify\",\n          \"data-a-v\": \"justify\",\n          key: index,\n          style: {\n            color: \"black\",\n            fontSize: 13\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 719\n          },\n          __self: this\n        }, contentItem.label);\n      })))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725\n        },\n        __self: this\n      }, this.state.gridFormData.map((dataItem, index) => React.createElement(\"tr\", {\n        style: {\n          height: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        \"data-exclude\": \"true\",\n        style: {\n          maxWidth: 50\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728\n        },\n        __self: this\n      }, this.state.gridFormButtons !== null && this.state.gridFormButtons.map((button, index) => React.createElement(Button, {\n        variant: \"outlined\",\n        onClick: () => this.buttonClick(button.name, dataItem),\n        style: {\n          margin: 1,\n          height: 24,\n          fontSize: 9,\n          maxWidth: 32,\n          backgroundColor: button.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731\n        },\n        __self: this\n      }, button.label))), this.state.Form.sections.map(section => {\n        if (this.state.Form.formName === \"IPRGridForm\") {\n          if (section.name === \"PersonData\") {\n            // console.log(\"DataItem\", dataItem)\n            return section.contents.map(contentItem => {\n              return dataItem.attributes.map(dataItemAttr => {\n                if (dataItemAttr.name === \"AdultsMedicalCart\") {\n                  return dataItemAttr.subDocument.attributes.map(medaktDataItemAttr => {\n                    if (medaktDataItemAttr.name === \"Person\") {\n                      return medaktDataItemAttr.subDocument.attributes.map((personDataItemAttr, index) => {\n                        if (personDataItemAttr.name === contentItem.name) {\n                          if (personDataItemAttr.value === null || personDataItemAttr.value === \"\") {\n                            // console.log(\"Name\", personDataItemAttr.name, \"Value\", personDataItemAttr.value)\n                            return React.createElement(\"td\", {\n                              align: \"left\",\n                              style: {\n                                color: \"black\",\n                                fontSize: 12\n                              },\n                              __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 763\n                              },\n                              __self: this\n                            }, \"-\");\n                          } else {\n                            return React.createElement(\"td\", {\n                              align: \"left\",\n                              style: {\n                                color: \"black\",\n                                fontSize: 12,\n                                whiteSpace: \"nowrap\",\n                                textOverflow: \"hidden\"\n                              },\n                              __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 768\n                              },\n                              __self: this\n                            }, this.getGridFormItems(personDataItemAttr));\n                          }\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            });\n          } else if (section.name === \"MedaktData\") {\n            // console.log(\"MedaktData section\")\n            return section.contents.map(contentItem => {\n              return dataItem.attributes.map(dataItemAttr => {\n                if (dataItemAttr.name === \"AdultsMedicalCart\") {\n                  // console.log(\"AdultsMedicalCart\", dataItemAttr)\n                  return dataItemAttr.subDocument.attributes.map((medaktDataItem, index) => {\n                    if (medaktDataItem.name === contentItem.name) {\n                      // console.log(medaktDataItem.name, medaktDataItem.enumValueText)\n                      if (medaktDataItem.value === null || medaktDataItem.value === \"\") {\n                        return React.createElement(\"td\", {\n                          align: \"left\",\n                          style: {\n                            color: \"black\",\n                            fontSize: 12\n                          },\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 799\n                          },\n                          __self: this\n                        }, \"-\");\n                      } else {\n                        return React.createElement(\"td\", {\n                          align: \"left\",\n                          style: {\n                            color: \"black\",\n                            fontSize: 12,\n                            whiteSpace: \"nowrap\",\n                            textOverflow: \"hidden\"\n                          },\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 804\n                          },\n                          __self: this\n                        }, this.getGridFormItems(medaktDataItem));\n                      }\n                    }\n                  });\n                }\n              });\n            });\n          } else {\n            return section.contents.map(contentItem => {\n              return dataItem.attributes.map((dataItemAttr, index) => {\n                if (dataItemAttr.type !== \"Doc\") {\n                  if (dataItemAttr.name === contentItem.name) {\n                    if (dataItemAttr.value === null || dataItemAttr.value === \"\") {\n                      // console.log(\"Name\", dataItemAttr.name, \"Value\", dataItemAttr.value)\n                      return React.createElement(\"td\", {\n                        align: \"left\",\n                        style: {\n                          color: \"black\",\n                          fontSize: 12\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 828\n                        },\n                        __self: this\n                      }, \"-\");\n                    } else {\n                      return React.createElement(\"td\", {\n                        align: \"left\",\n                        style: {\n                          color: \"black\",\n                          fontSize: 12,\n                          whiteSpace: \"nowrap\",\n                          textOverflow: \"hidden\"\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 833\n                        },\n                        __self: this\n                      }, this.getGridFormItems(dataItemAttr));\n                    }\n                  }\n                }\n              });\n            });\n          }\n        } else {\n          if (section.name === \"PersonData\") {\n            // console.log(\"PersonData section\")\n            return section.contents.map(contentItem => {\n              return dataItem.attributes.map((dataItemAttr, index) => {\n                if (dataItemAttr.name === \"Person\") {\n                  return dataItemAttr.subDocument.attributes.map((personDataItemAttr, index) => {\n                    if (personDataItemAttr.name === contentItem.name) {\n                      if (personDataItemAttr.value === null || personDataItemAttr.value === \"\") {\n                        // console.log(\"Name\", personDataItemAttr.name, \"Value\", personDataItemAttr.value)\n                        return React.createElement(\"td\", {\n                          align: \"left\",\n                          style: {\n                            color: \"black\",\n                            fontSize: 12\n                          },\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 861\n                          },\n                          __self: this\n                        }, \"-\");\n                      } else {\n                        return React.createElement(\"td\", {\n                          align: \"left\",\n                          style: {\n                            color: \"black\",\n                            fontSize: 12,\n                            whiteSpace: \"nowrap\",\n                            textOverflow: \"hidden\"\n                          },\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 866\n                          },\n                          __self: this\n                        }, this.getGridFormItems(personDataItemAttr));\n                      }\n                    }\n                  });\n                }\n              });\n            });\n          } else {\n            return section.contents.map(contentItem => {\n              return dataItem.attributes.map((dataItemAttr, index) => {\n                if (dataItemAttr.type !== \"Doc\") {\n                  if (dataItemAttr.name === contentItem.name) {\n                    if (dataItemAttr.value === null || dataItemAttr.value === \"\" || dataItemAttr.value === \"-\") {\n                      // console.log(\"Name\", dataItemAttr.name, \"Value\", dataItemAttr.value)\n                      return React.createElement(\"td\", {\n                        align: \"left\",\n                        style: {\n                          color: \"black\",\n                          fontSize: 12\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 890\n                        },\n                        __self: this\n                      }, \"-\");\n                    } else {\n                      return React.createElement(\"td\", {\n                        align: \"left\",\n                        style: {\n                          color: \"black\",\n                          fontSize: 12,\n                          whiteSpace: \"nowrap\",\n                          textOverflow: \"hidden\"\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 895\n                        },\n                        __self: this\n                      }, this.getGridFormItems(dataItemAttr));\n                    }\n                  }\n                }\n              });\n            });\n          }\n        }\n      })))))), React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916\n        },\n        __self: this\n      }, React.createElement(TableFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 917\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 918\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 919\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          minWidth: 90,\n          color: \"black\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920\n        },\n        __self: this\n      }, \"\\u041A\\u043E\\u043B-\\u0432\\u043E \\u0437\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439\")), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 922\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        variant: \"outlined\",\n        style: {\n          minWidth: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 923\n        },\n        __self: this\n      }, React.createElement(Select, {\n        onChange: this.handleChangeRowsPerPage,\n        value: this.state.size,\n        menuPortalTarget: document.body,\n        styles: {\n          height: 25,\n          color: \"black\",\n          menuPortal: base => _objectSpread({}, base, {\n            zIndex: 9999\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 927\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        value: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933\n        },\n        __self: this\n      }, \"5\"), React.createElement(MenuItem, {\n        value: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934\n        },\n        __self: this\n      }, \"10\"), React.createElement(MenuItem, {\n        value: 15,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935\n        },\n        __self: this\n      }, \"15\"), React.createElement(MenuItem, {\n        value: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936\n        },\n        __self: this\n      }, \"20\")))), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"\\u041D\\u0430 \\u043F\\u0435\\u0440\\u0432\\u0443\\u044E \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0443\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: () => this.KeyboardArrowLeftClick(2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 943\n        },\n        __self: this\n      }, React.createElement(FirstPageIcon, {\n        style: {\n          fontSize: \"large\",\n          color: \"primary\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944\n        },\n        __self: this\n      })))), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 948\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"\\u041D\\u0430 \\u043F\\u0440\\u0435\\u0434\\u044B\\u0434\\u0443\\u0449\\u044E\\u044E \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0443\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 949\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: () => this.KeyboardArrowLeftClick(this.state.page),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 950\n        },\n        __self: this\n      }, React.createElement(ArrowBackIosIcon, {\n        style: {\n          fontSize: \"medium\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 951\n        },\n        __self: this\n      })))), React.createElement(TableCell, {\n        style: {\n          color: \"black\",\n          fontSize: 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 955\n        },\n        __self: this\n      }, \"\\u0421\\u0442\\u0440: \", React.createElement(\"input\", {\n        style: {\n          maxWidth: 25\n        },\n        value: this.state.page,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956\n        },\n        __self: this\n      })), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"\\u041F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438 \\u043D\\u0430 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043D\\u0443\\u044E \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0443\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 959\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => this.GoToPage(),\n        variant: \"outlined\",\n        style: {\n          height: 22,\n          backgroundColor: \"#D1D6D6\",\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 960\n        },\n        __self: this\n      }, \"\\u043F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"))), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 972\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"\\u041D\\u0430 \\u0441\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u044E\\u044E \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0443\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 973\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: () => this.KeyboardArrowRightClick(this.state.page),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 974\n        },\n        __self: this\n      }, React.createElement(ArrowForwardIosIcon, {\n        style: {\n          fontSize: \"medium\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975\n        },\n        __self: this\n      })))), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => this.downloadExcel(),\n        style: {\n          backgroundColor: \"#047535\",\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }, \"\\u0412 Excel\"))))), React.createElement(Snackbar, {\n        open: this.state.showSnackBar,\n        onClose: () => this.handleCloseSnackBar(),\n        autoHideDuration: 1200,\n        message: this.state.snackBarMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992\n        },\n        __self: this\n      }))));\n    } catch (error) {\n      console.log(\"ERROR\", error);\n      this.handleCloseCurrentTab(this.state.process_id);\n      return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1006\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default GridForm;","map":{"version":3,"sources":["C:\\Users\\Serj\\Desktop\\ismse\\src\\components\\GridForm\\GridForm.jsx"],"names":["React","TableHead","TableRow","TableBody","TableCell","Grid","Card","Button","Paper","LinearProgress","FirstPageIcon","TableFooter","Checkbox","Select","MenuItem","FormControl","IconButton","ArrowForwardIosIcon","ArrowBackIosIcon","swal","Table","TableToExcel","Tooltip","Snackbar","GridForm","Component","constructor","props","buttonClick","name","dataItem","i","attributes","length","filterDocument","value","type","commandJson","commandType","session_id","state","process_id","taskID","variables","userAction","userId","userRole","docDefId","Form","doc","JSON","stringify","medicalCardId","docId","id","size","page","text","icon","buttons","yes","no","dangerMode","then","click","k","ok","console","log","sendFieldValues","personId","getPersonId","medakt","age","getPersonAge","adultsMedaktDocDefId","childMedaktDocDefId","IPR","docDef","subDocument","push","organizationId","medaktDefId","adult","existedState","getCurrentDocumentState","curDocState","docStateDefined","clearTabData","handleChange","event","newValue","parseInt","target","setState","handleChangeRowsPerPage","gridFormData","snackBarMessage","showSnackBar","rowsPageChange","docListIPR","fieldValue","gridFormButtons","SOAT","tableUniqueId","bind","KeyboardArrowRightClick","setDataFromProps","handleCloseCurrentTab","componentDidMount","componentDidUpdate","fstate","docList","undefined","getUUID","uuidv1","require","formName","l","parseDate","date","dd","substring","mm","yyyy","convertedDate","String","newDate","Date","getDate","padStart","getMonth","getFullYear","birthday","ageDifMs","now","getTime","ageDate","fullAge","Math","abs","getUTCFullYear","docState","handleCloseSnackBar","KeyboardArrowLeftClick","prevPage","nextPage","GoToPage","getAddressData","code","countries","j","regions","districts","subDistricts","villages","m","getGridFormItems","item","enumValueText","maxWidth","height","color","downloadExcel","convert","document","getElementById","getColsWidth","iprGridFormColsWidth","registrationGridFormColsWidth","medaktGridFormColsWidth","complaintsGridFormColsWidth","appealsGridFormColsWidth","render","backgroundColor","fontSize","map","attribute","index","caption","button","margin","label","formAttribute","dataItemAttr","whiteSpace","textOverflow","sections","section","contents","minWidth","contentItem","medaktDataItemAttr","personDataItemAttr","medaktDataItem","body","menuPortal","base","zIndex","error"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n// @material-ui/core components\r\n// import Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n// import TextField from \"@material-ui/core\";\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\n// import KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\n// import LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n// import OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport swal from 'sweetalert' // https://sweetalert.js.org/guides/\r\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Table } from 'reactstrap';\r\nimport TableToExcel from \"@linways/table-to-excel\"; // https://github.com/linways/table-to-excel\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n// import { SnackbarProvider, useSnackbar } from 'notistack';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nclass GridForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      gridFormData: null,\r\n      docListIPR: null,\r\n      fieldValue: {},\r\n      process_id: null,\r\n      session_id: null,\r\n      organizationId: null,\r\n      buttons: null,\r\n      gridFormButtons: null,\r\n      taskID: null,\r\n      userId: null,\r\n      userRole: null,\r\n      Form: null,\r\n      SOAT: null,\r\n      page: 1,\r\n      size: 10,\r\n      tableUniqueId: null,\r\n      showSnackBar: false,\r\n      snackBarMessage: \"\"\r\n    }\r\n    this.buttonClick = this.buttonClick.bind(this)\r\n    this.sendFieldValues = this.sendFieldValues.bind(this)\r\n    this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this)\r\n    this.KeyboardArrowRightClick = this.KeyboardArrowRightClick.bind(this)\r\n    this.setDataFromProps = this.setDataFromProps.bind(this)\r\n    this.handleCloseCurrentTab = this.handleCloseCurrentTab.bind(this)\r\n    this.clearTabData = this.clearTabData.bind(this)\r\n  }\r\n  sendFieldValues(commandJson) {\r\n    this.props.sendFieldValues(commandJson)\r\n  }\r\n  clearTabData(process_id) {\r\n    this.props.clearTabData(process_id)\r\n  }\r\n  async componentDidMount() {\r\n    if (this.state.process_id === null) {\r\n      console.log(\"GridForm PROPS\", this.props)\r\n      this.setDataFromProps()\r\n    }\r\n  }\r\n  async componentDidUpdate() {\r\n    if (this.state.process_id === null) {\r\n      this.setDataFromProps()\r\n    }\r\n  }\r\n  // Set data from props to local state\r\n  async setDataFromProps() {\r\n    let fstate = this.state\r\n\r\n    if (this.props.docList !== undefined && this.props.docList !== \"[]\" && this.props.docList !== null) {\r\n      let docList = this.props.docList\r\n      fstate.gridFormData = docList\r\n    }\r\n    if (this.props.docListIPR !== undefined && this.props.docListIPR !== \"[]\" && this.props.docListIPR !== null) {\r\n      let docListIPR = this.props.docListIPR\r\n      fstate.gridFormData = docListIPR\r\n      // fstate.size = docListIPR.length\r\n    }\r\n    if (this.props.page !== undefined && this.props.page !== \"null\") {\r\n      fstate.page = parseInt(this.props.page)\r\n    }\r\n    if (this.props.size !== undefined && this.props.size !== \"null\") {\r\n      fstate.size = parseInt(this.props.size)\r\n    }\r\n\r\n    if (this.props.gridFormButtons !== undefined && this.props.gridFormButtons !== null) {\r\n      fstate.gridFormButtons = this.props.gridFormButtons\r\n    }\r\n    if (this.props.SOAT !== undefined) {\r\n      fstate.SOAT = this.props.SOAT\r\n    }\r\n    fstate.tableUniqueId = this.getUUID()\r\n    fstate.taskID = this.props.taskID\r\n    fstate.session_id = this.props.session_id\r\n    fstate.process_id = this.props.process_id\r\n    fstate.organizationId = this.props.organizationId\r\n    fstate.Form = this.props.Form\r\n\r\n    fstate.userId = this.props.userId\r\n    fstate.userRole = this.props.userRole\r\n    this.setState(fstate)\r\n  }\r\n  getUUID() {\r\n    const uuidv1 = require(\"uuid/v1\")\r\n    return uuidv1()\r\n  }\r\n\r\n  handleCloseCurrentTab(process_id) {\r\n    this.props.handleCloseCurrentTab(process_id)\r\n  }\r\n  // getDate(date){\r\n  //   var newDate = new Date(date)\r\n  //   var dd = String(newDate.getDate()).padStart(2, '0')\r\n  //   var mm = String(newDate.getMonth() + 1).padStart(2, '0') //January is 0!\r\n  //   var yyyy = newDate.getFullYear()\r\n  //   var convertedDate = dd + '-' + mm + '-' + yyyy\r\n  //   return convertedDate\r\n  // }\r\n  // Find and return id of person document\r\n  getPersonId(dataItem) {\r\n    if (this.state.Form.formName === \"IPRGridForm\") {\r\n      for (let i = 0; i < dataItem.attributes.length; i++) {\r\n        if (dataItem.attributes[i].name === \"AdultsMedicalCart\") {\r\n          for (let l = 0; l < dataItem.attributes[i].subDocument.attributes.length; l++) {\r\n            if (dataItem.attributes[i].subDocument.attributes[l].name === \"Person\") {\r\n              return (dataItem.attributes[i].subDocument.attributes[l].value)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      for (let i = 0; i < dataItem.attributes.length; i++) {\r\n        if (dataItem.attributes[i].name === \"Person\") {\r\n          return (dataItem.attributes[i].value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Date parser for function getPersonAge\r\n  parseDate(date) {\r\n    if (date !== undefined) {\r\n      var dd = date.substring(0, 2)\r\n      var mm = date.substring(3, 5)\r\n      var yyyy = date.substring(6, 10)\r\n      var convertedDate = String(yyyy + '-' + mm + '-' + dd)\r\n      var newDate = new Date(convertedDate) // \"2017-01-26\"\r\n      dd = String(newDate.getDate()).padStart(2, '0')\r\n      mm = String(newDate.getMonth() + 1).padStart(2, '0') //January is 0!\r\n      yyyy = newDate.getFullYear()\r\n      convertedDate = yyyy + '-' + mm + '-' + dd\r\n    }\r\n    return convertedDate\r\n  }\r\n  // Function returns full age of person by its birthday\r\n  getPersonAge(dataItem) {\r\n    for (var i = 0; i < dataItem.attributes.length; i++) {\r\n      if (dataItem.attributes[i].name === \"Date_of_Birth\") {\r\n        var birthday = new Date(this.parseDate(dataItem.attributes[i].value))\r\n        // console.log(\"birthday\" , birthday)\r\n        var ageDifMs = Date.now() - birthday.getTime()\r\n        var ageDate = new Date(ageDifMs); // miliseconds from epoch\r\n        var fullAge = Math.abs(ageDate.getUTCFullYear() - 1970)\r\n        // console.log(\"AGE\" , fullAge)\r\n        return fullAge\r\n      }\r\n    }\r\n  }\r\n  // Function returns existaed state of selected document\r\n  getCurrentDocumentState(dataItem) {\r\n    for (var i = 0; i < dataItem.attributes.length; i++) {\r\n      if (dataItem.attributes[i].name === \"State\") {\r\n        var docState = dataItem.attributes[i].value\r\n        return docState\r\n      }\r\n    }\r\n  }\r\n  handleCloseSnackBar() {\r\n    this.setState({ showSnackBar: false })\r\n  }\r\n  // Handler of buttons click inside the grid form\r\n  buttonClick = (name, dataItem) => {\r\n    if (name === \"deleteIPR\") {\r\n      // console.log(\"DATA\", dataItem)\r\n      for (let i = 0; i < dataItem.attributes.length; i++) {\r\n        if (dataItem.attributes[i].name === \"AdultsMedicalCart\") {\r\n          const filterDocument = {\r\n            attributes: [\r\n              {\r\n                name: \"AdultsMedicalCart\",\r\n                value: dataItem.attributes[i].value,\r\n                type: \"Doc\"\r\n              }\r\n            ]\r\n          }\r\n          const commandJson =\r\n          {\r\n            commandType: \"completeTask\",\r\n            session_id: this.state.session_id,\r\n            process_id: this.state.process_id,\r\n            taskID: this.state.taskID,\r\n            variables: {\r\n              userAction: { value: \"deleteIPR\" },\r\n              userId: { value: this.state.userId },\r\n              userRole: { value: this.state.userRole },\r\n              docDefId: { value: this.state.Form.docDefId },\r\n              doc: { value: JSON.stringify(filterDocument) },\r\n              medicalCardId: { value: this.props.medicalCardId },\r\n              docId: { value: dataItem.id },\r\n              size: { value: 10 },\r\n              page: { value: 1 }\r\n            }\r\n          }\r\n          swal({\r\n            text: \"Вы точно хотите удалить этот ИПР\",\r\n            icon: \"warning\",\r\n            buttons: { yes: \"Да\", no: \"Нет\" },\r\n            dangerMode: true,\r\n          })\r\n            .then((click) => {\r\n              if (click === \"yes\") {\r\n                for (let k = 0; k < dataItem.attributes.length; k++) {\r\n                  if (dataItem.attributes[k].name === \"State\") {\r\n                    if (dataItem.attributes[k].value === \"Утвержден (подписан)\") {\r\n                      swal({\r\n                        text: \"Вы не можете удалять подписанные документы\",\r\n                        icon: \"warning\",\r\n                        buttons: { ok: \"Ок\" },\r\n                        // dangerMode: true,\r\n                      })\r\n                    } else {\r\n                      console.log(\"button deleteIPR: \", commandJson)\r\n                      this.sendFieldValues(commandJson)\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                console.log(\"CLICK\", click)\r\n              }\r\n            })\r\n        }\r\n      }\r\n    }\r\n    else if (name === \"openMedakt\") {\r\n      const filterDocument = {\r\n        attributes: [\r\n          {\r\n            name: \"AdultsMedicalCart\",\r\n            value: dataItem.id,\r\n            type: \"Doc\"\r\n          }\r\n        ]\r\n      }\r\n      const commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: this.state.session_id,\r\n        process_id: this.state.process_id,\r\n        taskID: this.state.taskID,\r\n        variables: {\r\n          userAction: { value: \"openMedakt\" },\r\n          userId: { value: this.state.userId },\r\n          userRole: { value: this.state.userRole },\r\n          // docDefId:{value: this.state.Form.docDefId},\r\n          doc: { value: JSON.stringify(filterDocument) },\r\n          medicalCardId: { value: this.props.medicalCardId },\r\n          personId: { value: this.getPersonId(dataItem) },\r\n          docId: { value: dataItem.id },\r\n          size: { value: 10 },\r\n          page: { value: 1 }\r\n        }\r\n      }\r\n      console.log(\"button openMedakt: \", commandJson)\r\n      this.sendFieldValues(commandJson)\r\n    }\r\n    else if (name === \"editIPR\") {\r\n      const commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: this.state.session_id,\r\n        process_id: this.state.process_id,\r\n        taskID: this.state.taskID,\r\n        variables: {\r\n          userAction: { value: name },\r\n          docId: { value: dataItem.id },\r\n          docDefId: { value: this.state.Form.docDefId },\r\n          personId: { value: this.getPersonId(dataItem) },\r\n          userId: { value: this.state.userId },\r\n          userRole: { value: this.state.userRole }\r\n        }\r\n      }\r\n      console.log(\"button editIPR: \", commandJson)\r\n      this.sendFieldValues(commandJson)\r\n    }\r\n    else if (name === \"selectDocumentToTransfer\") {\r\n      let medakt = {\r\n        attributes: [\r\n          // {\r\n          //   name: \"MseName\",\r\n          //   type: \"Enum\",\r\n          //   value: this.state.organizationId\r\n          // },\r\n          {\r\n            name: \"Person\",\r\n            type: \"Doc\",\r\n            value: dataItem.id\r\n          }\r\n        ]\r\n      }\r\n      let age = this.getPersonAge(dataItem)\r\n      let docDefId = age >= 18 ? this.state.Form.adultsMedaktDocDefId : this.state.Form.childMedaktDocDefId\r\n      let IPR = {\r\n        attributes: [\r\n          {\r\n            name: \"AdultsMedicalCart\",\r\n            type: \"Doc\",\r\n            docDef: docDefId,\r\n            subDocument: {\r\n              attributes: [\r\n                // {\r\n                //   name: \"MseName\",\r\n                //   type: \"Enum\",\r\n                //   value: this.state.organizationId\r\n                // },\r\n                {\r\n                  name: \"Person\",\r\n                  type: \"Doc\",\r\n                  value: dataItem.id\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      if (this.state.userRole !== \"Администратор\") {\r\n        medakt.attributes.push(\r\n          {\r\n            name: \"MseName\",\r\n            type: \"Enum\",\r\n            value: this.state.organizationId\r\n          }\r\n        )\r\n        IPR.attributes[0].subDocument.attributes.push(\r\n          {\r\n            name: \"MseName\",\r\n            type: \"Enum\",\r\n            value: this.state.organizationId\r\n          }\r\n        )\r\n      }\r\n      let commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: this.state.session_id,\r\n        process_id: this.state.process_id,\r\n        taskID: this.state.taskID,\r\n        variables: {\r\n          userAction: { value: name },\r\n          medakt: { value: JSON.stringify(medakt) },\r\n          medaktDefId: { value: docDefId },\r\n          IPR: { value: JSON.stringify(IPR) },\r\n          userId: { value: this.state.userId },\r\n        }\r\n      }\r\n      console.log(\"button selectDocumentToTransfer: \", commandJson)\r\n      this.sendFieldValues(commandJson)\r\n    }\r\n    else if (name === \"selectDocument\") {\r\n      let age = this.getPersonAge(dataItem)\r\n      let docDefId = (age >= 18) ? this.state.Form.adultsMedaktDocDefId : this.state.Form.childMedaktDocDefId\r\n      let adult = (age >= 18) ? \"True\" : \"False\"\r\n      let existedState = this.getCurrentDocumentState(dataItem)\r\n      let curDocState = \"False\"\r\n      if (existedState === \"Утвержден\" || existedState === \"Отказан\") {\r\n        curDocState = \"True\"\r\n      }\r\n      const commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: this.state.session_id,\r\n        process_id: this.state.process_id,\r\n        taskID: this.state.taskID,\r\n        variables: {\r\n          userAction: { value: name },\r\n          adult: { value: adult },\r\n          docDefId: { value: docDefId },\r\n          userId: { value: this.state.userId },\r\n          docId: { value: dataItem.id },\r\n          docStateDefined: { value: curDocState }\r\n        }\r\n      }\r\n      console.log(\"button selectDocument: \", commandJson)\r\n      this.sendFieldValues(commandJson)\r\n      this.clearTabData(this.state.process_id)\r\n    }\r\n    else if (name === \"deleteDocument\") {\r\n      for (let k = 0; k < dataItem.attributes.length; k++) {\r\n        if (dataItem.attributes[k].name === \"State\") {\r\n          // if (dataItem.attributes[k].value === \"Утвержден (подписан)\") {\r\n          //   this.props.callErrorToast(\"Вы не можете удалять подписанные документы!\")\r\n          // }\r\n          // else {\r\n          swal({\r\n            text: \"Вы точно хотите удалить этот документ?\",\r\n            icon: \"warning\",\r\n            buttons: { yes: \"Да\", no: \"Нет\" },\r\n            dangerMode: true,\r\n          })\r\n            .then((click) => {\r\n              if (click === \"yes\") {\r\n                const commandJson =\r\n                {\r\n                  commandType: \"completeTask\",\r\n                  session_id: this.state.session_id,\r\n                  process_id: this.state.process_id,\r\n                  taskID: this.state.taskID,\r\n                  variables: {\r\n                    userAction: { value: name },\r\n                    docId: { value: dataItem.id },\r\n                    personId: { value: this.getPersonId(dataItem) },\r\n                    userId: { value: this.state.userId },\r\n                    userRole: { value: this.state.userRole }\r\n                  }\r\n                }\r\n                this.sendFieldValues(commandJson)\r\n                this.clearTabData(this.state.process_id)\r\n                console.log(\"button deleteDocument: \", commandJson)\r\n              }\r\n            })\r\n          // }\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      const commandJson =\r\n      {\r\n        commandType: \"completeTask\",\r\n        session_id: this.state.session_id,\r\n        process_id: this.state.process_id,\r\n        taskID: this.state.taskID,\r\n        variables: {\r\n          userAction: { value: name },\r\n          docId: { value: dataItem.id },\r\n          personId: { value: this.getPersonId(dataItem) },\r\n          userId: { value: this.state.userId },\r\n          userRole: { value: this.state.userRole }\r\n        }\r\n      }\r\n      console.log(\"button \", name, commandJson)\r\n      this.sendFieldValues(commandJson)\r\n      this.clearTabData(this.state.process_id)\r\n    }\r\n  }\r\n  // simple component change handler\r\n  handleChange = (event) => {\r\n    let newValue = parseInt(event.target.value)\r\n    this.setState({ page: newValue })\r\n  }\r\n  // Handle prev page button click\r\n  KeyboardArrowLeftClick(page) {\r\n    if (page !== 1 && this.state.page !== 1) {\r\n      var prevPage = page - 1\r\n      this.setState({ page: prevPage })\r\n      this.props.rowsPageChange(this.state.size, prevPage)\r\n      console.log(\"Page changed: \", prevPage)\r\n    }\r\n    else {\r\n      this.setState({ snackBarMessage: \"Вы на первой странице!\" })\r\n      this.setState({ showSnackBar: true })\r\n    }\r\n  }\r\n  // Handle next page button click\r\n  KeyboardArrowRightClick(page) {\r\n    if (this.state.gridFormData.length < this.state.size) {\r\n      this.setState({ snackBarMessage: \"Других записей нет!\" })\r\n      this.setState({ showSnackBar: true })\r\n    }\r\n    else {\r\n      var nextPage = page + 1\r\n      this.setState({ page: nextPage })\r\n      this.props.rowsPageChange(this.state.size, nextPage)\r\n      console.log(\"Page changed: \", nextPage)\r\n    }\r\n\r\n  }\r\n  GoToPage() {\r\n    this.props.rowsPageChange(this.state.size, this.state.page)\r\n  }\r\n  // Handler of amount of rows per page\r\n  handleChangeRowsPerPage = (event) => {\r\n    if (this.state.gridFormData.length < this.state.size && event.target.value > this.state.gridFormData.length) {\r\n      this.setState({ snackBarMessage: \"Других записей нет!\" })\r\n      this.setState({ showSnackBar: true })\r\n    }\r\n    else {\r\n      this.setState({ size: event.target.value })\r\n      this.props.rowsPageChange(event.target.value, this.state.page)\r\n      // console.log(\"Rows amount changed: \", event.target.value)\r\n    }\r\n  }\r\n  // Get name of address by its code\r\n  getAddressData(code, name) {\r\n    // console.log(\"CODE\", code)\r\n    for (var i = 0; i < this.state.SOAT.countries.length; i++) {\r\n      if (code === this.state.SOAT.countries[i].code && name === \"Country\") {\r\n        return this.state.SOAT.countries[i].name\r\n      }\r\n      else {\r\n        for (var j = 0; j < this.state.SOAT.countries[i].regions.length; j++) {\r\n          if (code === this.state.SOAT.countries[i].regions[j].code && name === \"Region\") {\r\n            return this.state.SOAT.countries[i].regions[j].name\r\n          }\r\n          else {\r\n            for (var k = 0; k < this.state.SOAT.countries[i].regions[j].districts.length; k++) {\r\n              if (code === this.state.SOAT.countries[i].regions[j].districts[k].code && name === \"District\") {\r\n                return this.state.SOAT.countries[i].regions[j].districts[k].name\r\n              }\r\n              else {\r\n                if (this.state.SOAT.countries[i].regions[j].districts[k].subDistricts !== undefined) {\r\n                  for (var l = 0; l < this.state.SOAT.countries[i].regions[j].districts[k].subDistricts.length; l++) {\r\n                    if (code === this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].code && name === \"subDistrict\") {\r\n                      return this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].name\r\n                    }\r\n                    else {\r\n                      if (this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages !== undefined) {\r\n                        for (var m = 0; m < this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages.length; m++) {\r\n                          if (code === this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages[m].code && name === \"Village\") {\r\n                            return this.state.SOAT.countries[i].regions[j].districts[k].subDistricts[l].villages[m].name\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Return value by type of component\r\n  getGridFormItems(item) {\r\n    if (item.name === \"Region\" || item.name === \"District\"\r\n      || item.name === \"subDistrict\" || item.name === \"Village\") {\r\n      return this.getAddressData(item.value, item.name)\r\n      // return item.enumValueText\r\n    }\r\n    else {\r\n      if (item.type === \"Enum\") {\r\n        return item.enumValueText\r\n      }\r\n      else if (item.type === \"DateTime\") {\r\n        return item.value.substring(0, 10)\r\n      }\r\n      // else if (item.type === \"DateTime\") {\r\n      //   // Convert date to appropriate format\r\n      //   if (item !== undefined) {\r\n      //     var dd = item.value.substring(0, 2)\r\n      //     var mm = item.value.substring(3, 5)\r\n      //     var yyyy = item.value.substring(6, 10)\r\n      //     var convertedDate = String(yyyy + '-' + mm + '-' + dd)\r\n      //     var newDate = new Date(convertedDate) // \"2017-01-26\"\r\n      //     dd = String(newDate.getDate()).padStart(2, '0')\r\n      //     mm = String(newDate.getMonth() + 1).padStart(2, '0') //January is 0!\r\n      //     yyyy = newDate.getFullYear()\r\n      //     convertedDate = dd + '-' + mm + '-' + yyyy\r\n      //     return convertedDate\r\n      //   }\r\n      // }\r\n      else if (item.type === \"Bool\") {\r\n        return (\r\n          <Checkbox\r\n            style={{ maxWidth: 20, height: 15, color: \"grey\" }}\r\n            name={item.name}\r\n            disabled={true}\r\n            checked={item.value === \"True\" ? true : false}\r\n          />)\r\n      }\r\n      else {\r\n        return item.value\r\n      }\r\n    }\r\n\r\n  }\r\n  downloadExcel() {\r\n    TableToExcel.convert(document.getElementById(this.state.tableUniqueId))\r\n  }\r\n  // Define colums width to download grid form into ecel\r\n  getColsWidth() {\r\n    let iprGridFormColsWidth = \"20, 15, 16, 30, 15, 15, 17, 17, 16, 19, 19, 19, 14, 16, 16, 13, 18, 18, 18, 15, 15, 15, 15, 20, 25, 20, 18, 15, 15, 15, 15, 15\"\r\n    let registrationGridFormColsWidth = \"20, 15, 16, 30, 15, 15, 17, 17, 16, 19, 19, 19, 14, 16, 13, 18\"\r\n    let medaktGridFormColsWidth = \"20, 15, 16, 30, 15, 15, 15, 17, 17, 16, 19, 19, 19, 14, 16, 13, 18, 18, 18, 15\"\r\n    let complaintsGridFormColsWidth = \"20, 16, 16, 16, 17, 13, 13, 13, 19, 25\"\r\n    let appealsGridFormColsWidth = \"20, 16, 16, 16, 17, 13, 13, 13, 19, 25, 25\"\r\n    if (this.state.Form.formName === \"IPRGridForm\") {\r\n      return iprGridFormColsWidth\r\n    }\r\n    else if (this.state.Form.formName === \"adultsRegistrationGridForm\") {\r\n      return registrationGridFormColsWidth\r\n    }\r\n    else if (this.state.Form.formName === \"complaintsGridForm\") {\r\n      return complaintsGridFormColsWidth\r\n    }\r\n    else if (this.state.Form.formName === \"appealsGridForm\") {\r\n      return appealsGridFormColsWidth\r\n    }\r\n    else {\r\n      return medaktGridFormColsWidth\r\n    }\r\n  }\r\n  render() {\r\n    try {\r\n      if (!this.state.userId) return <LinearProgress />\r\n      else if (!this.state.session_id) return <LinearProgress />\r\n      else if (!this.state.process_id) return <LinearProgress />\r\n      else if (!this.state.taskID) return <LinearProgress />\r\n      return (\r\n        <Grid container direction=\"row\" justify=\"flex-start\" spacing={0}>\r\n          <Grid item sm={\"auto\"}>\r\n            <Card>\r\n              <Paper>\r\n                {this.state.Form.formName === \"documentViewForm\" ?\r\n                  <Table\r\n                    data-cols-width=\"15, 11, 11, 11, 15, 15, 15, 15, 12, 22, 32, 7, 10, 25, 13\"\r\n                    bordered\r\n                    id={this.state.tableUniqueId}\r\n                    size=\"small\">\r\n                    <TableHead style={{ backgroundColor: \"#D3D3FE\" }}>\r\n                      <tr>\r\n                        <TableCell data-exclude=\"true\" key=\"action\" style={{ color: \"black\", fontSize: 12 }}>Действие</TableCell>\r\n                        {this.state.Form.attributes.map((attribute, index) =>\r\n                          <TableCell data-b-a-s=\"thin\" data-f-bold=\"true\" style={{ color: \"black\", fontSize: 13 }}>{attribute.caption}</TableCell>\r\n                        )}\r\n                      </tr>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {this.state.gridFormData.map((dataItem, index) => (\r\n                        <TableRow style={{ height: 30 }}>\r\n                          <TableCell data-exclude=\"true\" style={{ maxWidth: 50 }}>\r\n                            {this.state.gridFormButtons.map((button, index) =>\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                onClick={() => this.buttonClick(button.name, dataItem)}\r\n                                style={{\r\n                                  margin: 1,\r\n                                  height: 24,\r\n                                  fontSize: 9,\r\n                                  maxWidth: 32,\r\n                                  backgroundColor: button.backgroundColor\r\n                                }}\r\n                              >{button.label}\r\n                              </Button>\r\n                            )}\r\n                          </TableCell>\r\n                          {this.state.Form.attributes.map((formAttribute, index) =>\r\n                            dataItem.attributes.map((dataItemAttr, index) => {\r\n                              if (dataItemAttr.name === formAttribute.name) {\r\n                                if (dataItemAttr.value === null)\r\n                                  return (\r\n                                    <TableCell align=\"left\">-</TableCell>\r\n                                  )\r\n                                else return (\r\n                                  <TableCell align=\"left\" style={{ whiteSpace: \"nowrap\", textOverflow: \"hidden\" }}>\r\n                                    {this.getGridFormItems(dataItemAttr)}\r\n                                    {/* {dataItemAttr.type === \"Enum\" ? dataItemAttr.enumValueText : dataItemAttr.value} */}\r\n                                  </TableCell>\r\n                                )\r\n                              }\r\n                              else return null\r\n                            })\r\n                          )}\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                  :\r\n                  <Table\r\n                    data-cols-width={this.getColsWidth()}\r\n                    // Статус\t№ регистрации\t№ акта по МСЭК\tНаименование МСЭ\tИнвалидность установлена с\tИнвалидность установлена по\t\r\n                    // Дата регистрации\tФамилия\tИмя\tОтчество\tПИН\tДата рождения\tПол\tОбласть\tРайон/город\tДжаомат\tСело\tДом/кв/ул\tТелефон\r\n                    bordered\r\n                    id={this.state.tableUniqueId}\r\n                    size=\"small\">\r\n                    <TableHead style={{ backgroundColor: \"#D3D3FE\" }}>\r\n                      <tr>\r\n                        <td data-exclude=\"true\"></td>\r\n                        {this.state.Form.sections.map((section, index) => {\r\n                          // Build 1rst row of header\r\n                          return (\r\n                            <td data-b-a-s=\"thin\" data-f-bold=\"true\" colSpan={section.contents.length} key={index} style={{ color: \"black\", fontSize: 13 }}>{section.label}</td>\r\n                          )\r\n                        })}\r\n                      </tr>\r\n                      <tr>\r\n                        <td data-exclude=\"true\" key=\"action\" style={{ color: \"black\", fontSize: 14, minWidth: 50 }}>Действие</td>\r\n                        {this.state.Form.sections.map(section =>\r\n                          section.contents.map((contentItem, index) => {\r\n                            // Build 2nd row of header\r\n                            return (\r\n                              <td data-f-bold=\"true\" data-a-wrap=\"true\" data-b-a-s=\"thin\" data-a-h=\"justify\" data-a-v=\"justify\" key={index} style={{ color: \"black\", fontSize: 13 }}>{contentItem.label}</td>\r\n                            )\r\n                          })\r\n                        )}\r\n                      </tr>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {this.state.gridFormData.map((dataItem, index) => (\r\n                        <tr style={{ height: 30 }}>\r\n                          <td data-exclude=\"true\" style={{ maxWidth: 50 }}>\r\n                            {this.state.gridFormButtons !== null &&\r\n                              this.state.gridFormButtons.map((button, index) =>\r\n                                <Button\r\n                                  variant=\"outlined\"\r\n                                  onClick={() => this.buttonClick(button.name, dataItem)}\r\n                                  style={{\r\n                                    margin: 1,\r\n                                    height: 24,\r\n                                    fontSize: 9,\r\n                                    maxWidth: 32,\r\n                                    backgroundColor: button.backgroundColor\r\n                                  }}\r\n                                >{button.label}\r\n                                </Button>\r\n                              )}\r\n                          </td>\r\n                          {this.state.Form.sections.map(section => {\r\n                            if (this.state.Form.formName === \"IPRGridForm\") {\r\n                              if (section.name === \"PersonData\") {\r\n                                // console.log(\"DataItem\", dataItem)\r\n                                return (\r\n                                  section.contents.map(contentItem => {\r\n                                    return (\r\n                                      dataItem.attributes.map(dataItemAttr => {\r\n                                        if (dataItemAttr.name === \"AdultsMedicalCart\") {\r\n                                          return (\r\n                                            dataItemAttr.subDocument.attributes.map(medaktDataItemAttr => {\r\n                                              if (medaktDataItemAttr.name === \"Person\") {\r\n                                                return (\r\n                                                  medaktDataItemAttr.subDocument.attributes.map((personDataItemAttr, index) => {\r\n                                                    if (personDataItemAttr.name === contentItem.name) {\r\n                                                      if (personDataItemAttr.value === null || personDataItemAttr.value === \"\") {\r\n                                                        // console.log(\"Name\", personDataItemAttr.name, \"Value\", personDataItemAttr.value)\r\n                                                        return (\r\n                                                          <td align=\"left\" style={{ color: \"black\", fontSize: 12 }}>-</td>\r\n                                                        )\r\n                                                      }\r\n                                                      else {\r\n                                                        return (\r\n                                                          <td align=\"left\" style={{ color: \"black\", fontSize: 12, whiteSpace: \"nowrap\", textOverflow: \"hidden\" }}>\r\n                                                            {this.getGridFormItems(personDataItemAttr)}\r\n                                                          </td>\r\n                                                        )\r\n                                                      }\r\n                                                    }\r\n                                                  })\r\n                                                )\r\n                                              }\r\n                                            })\r\n                                          )\r\n                                        }\r\n                                      })\r\n                                    )\r\n                                  })\r\n                                )\r\n                              }\r\n                              else if (section.name === \"MedaktData\") {\r\n                                // console.log(\"MedaktData section\")\r\n                                return (\r\n                                  section.contents.map(contentItem => {\r\n                                    return (\r\n                                      dataItem.attributes.map(dataItemAttr => {\r\n                                        if (dataItemAttr.name === \"AdultsMedicalCart\") {\r\n                                          // console.log(\"AdultsMedicalCart\", dataItemAttr)\r\n                                          return (\r\n                                            dataItemAttr.subDocument.attributes.map((medaktDataItem, index) => {\r\n                                              if (medaktDataItem.name === contentItem.name) {\r\n                                                // console.log(medaktDataItem.name, medaktDataItem.enumValueText)\r\n                                                if (medaktDataItem.value === null || medaktDataItem.value === \"\") {\r\n                                                  return (\r\n                                                    <td align=\"left\" style={{ color: \"black\", fontSize: 12 }}>-</td>\r\n                                                  )\r\n                                                }\r\n                                                else {\r\n                                                  return (\r\n                                                    <td align=\"left\" style={{ color: \"black\", fontSize: 12, whiteSpace: \"nowrap\", textOverflow: \"hidden\" }}>\r\n                                                      {this.getGridFormItems(medaktDataItem)}\r\n                                                    </td>\r\n                                                  )\r\n                                                }\r\n                                              }\r\n                                            })\r\n                                          )\r\n                                        }\r\n                                      })\r\n                                    )\r\n                                  })\r\n                                )\r\n                              }\r\n                              else {\r\n                                return (\r\n                                  section.contents.map(contentItem => {\r\n                                    return (\r\n                                      dataItem.attributes.map((dataItemAttr, index) => {\r\n                                        if (dataItemAttr.type !== \"Doc\") {\r\n                                          if (dataItemAttr.name === contentItem.name) {\r\n                                            if (dataItemAttr.value === null || dataItemAttr.value === \"\") {\r\n                                              // console.log(\"Name\", dataItemAttr.name, \"Value\", dataItemAttr.value)\r\n                                              return (\r\n                                                <td align=\"left\" style={{ color: \"black\", fontSize: 12 }}>-</td>\r\n                                              )\r\n                                            }\r\n                                            else {\r\n                                              return (\r\n                                                <td align=\"left\" style={{ color: \"black\", fontSize: 12, whiteSpace: \"nowrap\", textOverflow: \"hidden\" }}>\r\n                                                  {this.getGridFormItems(dataItemAttr)}\r\n                                                </td>\r\n                                              )\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      })\r\n                                    )\r\n                                  })\r\n                                )\r\n                              }\r\n                            }\r\n\r\n                            else {\r\n                              if (section.name === \"PersonData\") {\r\n                                // console.log(\"PersonData section\")\r\n                                return (\r\n                                  section.contents.map(contentItem => {\r\n                                    return (\r\n                                      dataItem.attributes.map((dataItemAttr, index) => {\r\n                                        if (dataItemAttr.name === \"Person\") {\r\n                                          return (\r\n                                            dataItemAttr.subDocument.attributes.map((personDataItemAttr, index) => {\r\n                                              if (personDataItemAttr.name === contentItem.name) {\r\n                                                if (personDataItemAttr.value === null || personDataItemAttr.value === \"\") {\r\n                                                  // console.log(\"Name\", personDataItemAttr.name, \"Value\", personDataItemAttr.value)\r\n                                                  return (\r\n                                                    <td align=\"left\" style={{ color: \"black\", fontSize: 12 }}>-</td>\r\n                                                  )\r\n                                                }\r\n                                                else {\r\n                                                  return (\r\n                                                    <td align=\"left\" style={{ color: \"black\", fontSize: 12, whiteSpace: \"nowrap\", textOverflow: \"hidden\" }}>\r\n                                                      {this.getGridFormItems(personDataItemAttr)}\r\n                                                    </td>\r\n                                                  )\r\n                                                }\r\n                                              }\r\n                                            })\r\n                                          )\r\n                                        }\r\n                                      })\r\n                                    )\r\n                                  })\r\n                                )\r\n                              }\r\n                              else {\r\n                                return (\r\n                                  section.contents.map(contentItem => {\r\n                                    return (\r\n                                      dataItem.attributes.map((dataItemAttr, index) => {\r\n                                        if (dataItemAttr.type !== \"Doc\") {\r\n                                          if (dataItemAttr.name === contentItem.name) {\r\n                                            if (dataItemAttr.value === null || dataItemAttr.value === \"\" || dataItemAttr.value === \"-\") {\r\n                                              // console.log(\"Name\", dataItemAttr.name, \"Value\", dataItemAttr.value)\r\n                                              return (\r\n                                                <td align=\"left\" style={{ color: \"black\", fontSize: 12 }}>-</td>\r\n                                              )\r\n                                            }\r\n                                            else {\r\n                                              return (\r\n                                                <td align=\"left\" style={{ color: \"black\", fontSize: 12, whiteSpace: \"nowrap\", textOverflow: \"hidden\" }}>\r\n                                                  {this.getGridFormItems(dataItemAttr)}\r\n                                                </td>\r\n                                              )\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      })\r\n                                    )\r\n                                  })\r\n                                )\r\n                              }\r\n                            }\r\n\r\n                          })}\r\n                        </tr>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                }\r\n              </Paper>\r\n              <Table>\r\n                <TableFooter>\r\n                  <TableRow>\r\n                    <TableCell >\r\n                      <div style={{ minWidth: 90, color: \"black\" }}>Кол-во записей</div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <FormControl\r\n                        variant=\"outlined\"\r\n                        style={{ minWidth: 30 }}\r\n                      >\r\n                        <Select\r\n                          onChange={this.handleChangeRowsPerPage}\r\n                          value={this.state.size}\r\n                          menuPortalTarget={document.body}\r\n                          styles={{ height: 25, color: \"black\", menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n                        >\r\n                          <MenuItem value={5}>5</MenuItem>\r\n                          <MenuItem value={10}>10</MenuItem>\r\n                          <MenuItem value={15}>15</MenuItem>\r\n                          <MenuItem value={20}>20</MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </TableCell>\r\n\r\n                    <TableCell>\r\n                      <Tooltip title=\"На первую страницу\">\r\n                        <IconButton onClick={() => this.KeyboardArrowLeftClick(2)}>\r\n                          <FirstPageIcon style={{ fontSize: \"large\", color: \"primary\" }} />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Tooltip title=\"На предыдущюю страницу\">\r\n                        <IconButton onClick={() => this.KeyboardArrowLeftClick(this.state.page)}>\r\n                          <ArrowBackIosIcon style={{ fontSize: \"medium\" }} />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </TableCell>\r\n                    <TableCell style={{ color: \"black\", fontSize: 16 }}>\r\n                      Стр: <input style={{ maxWidth: 25 }} value={this.state.page} onChange={this.handleChange}></input>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Tooltip title=\"Перейти на указанную страницу\">\r\n                        <Button\r\n                          onClick={() => this.GoToPage()}\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            height: 22,\r\n                            backgroundColor: \"#D1D6D6\",\r\n                            fontSize: 12\r\n                          }}\r\n                        >перейти\r\n                        </Button>\r\n                      </Tooltip>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Tooltip title=\"На следующюю страницу\">\r\n                        <IconButton onClick={() => this.KeyboardArrowRightClick(this.state.page)}>\r\n                          <ArrowForwardIosIcon style={{ fontSize: \"medium\" }} />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button\r\n                        onClick={() => this.downloadExcel()}\r\n                        style={{\r\n                          backgroundColor: \"#047535\",\r\n                          color: \"white\"\r\n                        }}\r\n                      >В Excel\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableFooter>\r\n              </Table>\r\n              <Snackbar\r\n                open={this.state.showSnackBar}\r\n                onClose={() => this.handleCloseSnackBar()}\r\n                autoHideDuration={1200}\r\n                message={this.state.snackBarMessage}\r\n              />\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    }\r\n    catch (error) {\r\n      console.log(\"ERROR\", error)\r\n      this.handleCloseCurrentTab(this.state.process_id)\r\n      return <LinearProgress />\r\n    }\r\n  }\r\n}\r\nexport default GridForm;\r\n"]},"metadata":{},"sourceType":"module"}